{"version":3,"sources":["components/Navigation.js","components/Round.js","components/AddRound.js","components/Rounds.js","components/LoginForm.js","querys.js","useTimeout.js","App.js","index.js"],"names":["Navigation","props","show","setPage","page","username","currentRoundId","react_default","a","createElement","className","onClick","console","log","doLogout","Round","round","allPointsQuery","loading","error","savedState","uploadingPoints","buttonDisabled","players","users","trackIndex","allPoints","data","order","slice","maxTrackIndex","arr","temp","arguments","length","undefined","forEach","element","maxValue","map","play","changeTrack","addNewTrack","handleTrackIndexChangeClick","index","handlePointChangeClick","points","user","updatePoint","id","sort","u1","u2","_loop","i","filter","point","u1pointArray","u2pointArray","v","u1p","u2p","_ret","trackNumbers","push","key","location","name","text","player","playerPlays","p1","p2","total","reduce","tot","orderOf","deleteLastTrack","finishRound","disabled","uploadPoints","AddRound","allLocations","allLocationsQuery","allUsers","allUsersQuery","currentLocation","currentPlayers","handleLocationClick","handleUserClick","onSubmit","event","preventDefault","startNewRound","type","Rounds","result","handleRoundClick","setRound","handleDeleteRoundClick","deleteRound","rounds","allRounds","r1","r2","date","colSpan","d","Date","dateString","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","LoginForm","_useState","useState","_useState2","Object","slicedToArray","setUsername","_useState3","_useState4","password","setPassword","login","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","doLogin","stop","_x","apply","this","placeholder","value","onChange","target","LOGIN","gql","_templateObject","ALL_LOCATIONS","_templateObject2","_templateObject3","ALL_ROUNDS","_templateObject4","ALL_POINTS","_templateObject5","ALL_USERS","_templateObject6","ADD_ROUND","_templateObject7","_templateObject8","_templateObject9","DELETE_ROUND","_templateObject10","ADD_CACHED_POINTS","_templateObject11","_templateObject12","useTimeout","logoutTimeout","logout","setTimeouts","setTimeout","useEffect","events","resetTimeout","clearTimeout","window","addEventListener","App","setCurrentRoundId","currentRound","setCurrentRound","_useState5","_useState6","setCurrentPlayers","_useState7","_useState8","setCurrentLocation","_useState9","_useState10","errorMessage","setErrorMessage","_useState11","_useState12","setTrackIndex","_useState13","_useState14","token","setToken","_useState15","_useState16","_useState17","_useState18","client","useApolloClient","_useState19","_useState20","setSavedState","_useState21","_useState22","uploadingPointsState","setUploadingPointsState","localStorage","getItem","response","tusername","loginMutation","variables","sent","setItem","resetStore","_x2","clear","sessionTimeout","handleError","graphQLErrors","message","networkError","errorArray","errors","addCachedPointsMutation","useMutation","onError","update","store","serverPoints","addCachedPoints","localPoints","readQuery","query","roundId","serverPoint","foundMatch","localPoint","addRoundMutation","dataInStore","addedRound","addRound","concat","writeQuery","deleteRoundMutation","deletedRound","addPointToCache","userId","originalState","objectSpread","newPoint","__typename","crypto","randomBytes","toString","deleteLastTrackFromCache","i1","i2","uploadPointsFromCacheToServer","_ref2","_callee2","_context2","abrupt","pointIds","userIds","trackIndexes","t0","_ref4","_callee4","_context4","_ref5","_callee5","_context5","_x3","_x4","useQuery","skip","allRoundsQuery","_ref6","_callee6","_context6","_x5","_ref7","_callee7","_context7","locationId","Container","components_Navigation","components_LoginForm","components_AddRound","includes","components_Rounds","components_Round","max","wshost","origin","replace","wsuri","wsLink","WebSocketLink","uri","options","reconnect","httpLink","createHttpLink","authLink","setContext","_","headers","authorization","link","split","_getMainDefinition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","render","react_apollo_esm","ApolloContext","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5e9ce1e3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navigation = (props) => {\n  if (!props.show) {\n    return null\n  }\n  const setPage = (page) => {\n    props.setPage(page)\n  }\n  const doLogout = () => {\n    props.doLogout()\n  }\n  const username = props.username\n  const currentRoundId = props.currentRoundId\n  return (\n    <div className=\"ui secondary menu\">\n      <div className=\"item\" onClick={() => { setPage('main'); console.log('main') }}>main</div>\n      {currentRoundId ?\n        <div className=\"item\" onClick={() => { setPage('round'); console.log('continue round') }}>continue round</div>\n        : <div className=\"item\" onClick={() => { setPage('round'); console.log('new round') }}>new round</div>\n      }\n      <div className=\"item\">{username} logged in</div>\n      <div className=\"item\" onClick={() => { setPage(null); doLogout() }}>logout</div>\n\n    </div>\n  )\n}\n\nexport default Navigation\n\n","import React from 'react';\n\nconst maxValue = (arr, def = -1) => {\n  let temp = def\n  arr.forEach(element => {\n    if (temp < element) {\n      temp = element\n    }\n  });\n  return temp\n}\n\nconst Round = (props) => {\n  if (!props.show) {\n    return null\n  }\n  //console.log('round', props.round)\n  if (!props.round) {\n    console.log('no round chosen')\n    return null\n  }\n  if (props.allPointsQuery.loading) {\n    console.log('loading')\n    return <div>loading...</div>\n  }\n  if (props.allPointsQuery.error) {\n    console.log('error', props.allPointsQuery.error)\n    return <div>error...</div>\n  }\n  //console.log('saved state and uploading points state', props.savedState, props.uploadingPoints)\n  const savedState = props.savedState\n  const uploadingPoints = props.uploadingPoints\n  const buttonDisabled = savedState || uploadingPoints\n  const players = props.round.users\n  const trackIndex = props.trackIndex\n  const allPoints = props.allPointsQuery.data.allPoints\n  const round = props.round\n  let order = players.slice()\n  console.log('all points', allPoints)\n  //console.log('players ', props.round.users)\n\n  const maxTrackIndex = maxValue(allPoints.map(play => play.trackIndex), -1)\n  if (trackIndex === -1 && maxTrackIndex > -1) {\n    props.changeTrack(maxTrackIndex)\n    return null\n  }\n  if (allPoints.length === 0) {\n    console.log('new round', props.round)\n    props.addNewTrack()\n    props.changeTrack(0)\n  }\n  const handleDeleteLastTrackClick = () => {\n    props.deleteLastTrack()\n  }\n  const handleRoundFinishClick = () => {\n    props.finishRound()\n  }\n  const handleUploadPointsClick = () => {\n    props.uploadPoints()\n  }\n  const handleTrackIndexChangeClick = (index) =>\n    () => {\n      console.log('new index', index, 'max index', maxTrackIndex)\n      if (maxTrackIndex + 1 === index) {\n        console.log('add new track')\n        props.addNewTrack()\n      }\n      props.changeTrack(index)\n    }\n  const handlePointChangeClick = (points, user) =>\n    () => {\n      if (points > -1) {\n        props.updatePoint(points, user.id)\n      }\n    }\n  order.sort((u1, u2) => {\n    for (let i = trackIndex; i >= 0; i--) {\n      const temp = allPoints.filter(point => point.trackIndex === i)\n      const u1pointArray = temp.filter(point => point.user.id === u1.id)\n      const u2pointArray = temp.filter(point => point.user.id === u2.id)\n      if (u1pointArray.length === 0 || u2pointArray.length === 0) {\n        return 0\n      }\n      const u1p = u1pointArray[0].points\n      const u2p = u2pointArray[0].points\n      if (u1p > u2p) {\n        return 1\n      } else if (u1p < u2p) {\n        return -1\n      }\n    }\n    return 0\n  })\n  //console.log('order', order)\n  const orderOf = (player) => {\n    for (let i = 0; i < order.length; i++) {\n      if (player === order[i]) {\n        return i + 1 + '.'\n      }\n    }\n    return 'err'\n  }\n\n\n  const trackNumbers = []\n  console.log('max track index', maxTrackIndex, 'track index', trackIndex)\n  for (let i = 0; i < maxTrackIndex + 1; i++) {\n    trackNumbers.push(<th key={i}>{i + 1}</th>)\n  }\n  console.log('track numbers th', trackNumbers, 'all points', allPoints)\n  return (\n    <div className=\"App\">\n      {savedState && <div>saved state</div>}\n      {!savedState && <div><strong>unsaved state</strong></div>}\n      <div>\n        <h3>{round.location.name}</h3>\n        <h3>\n          <div className=\"row\">\n            <button text='-' onClick={handleTrackIndexChangeClick(trackIndex - 1)}>-</button>\n            Track {trackIndex + 1}\n            <button text='+' onClick={handleTrackIndexChangeClick(trackIndex + 1)}>+</button>\n          </div>\n        </h3>\n        <table className=\"ui celled table\">\n          <thead>\n            <tr>\n              <th>order</th><th>player</th>\n              {\n                trackNumbers\n              }\n              <th>total</th>\n            </tr>\n          </thead>\n          <tbody>\n\n            {players.map(player => {\n              const playerPlays = allPoints.filter(point => point.user.id === player.id)\n              if (playerPlays) {\n                playerPlays.sort((p1, p2) => p1.trackIndex - p2.trackIndex)\n                const total = playerPlays.length === 0 ?\n                  0 : playerPlays.map(play => play.points).reduce((tot, point) => tot + point)\n                return (\n                  < tr key={player.id} >\n                    <td key='order'>{orderOf(player)}</td>\n                    <td key={player.username}>{player.username}</td>\n                    {\n                      playerPlays.map(play => {\n                        if (play.trackIndex === trackIndex) {\n                          return (<td key={play.trackIndex + player.id}>\n                            <strong>\n                              <button className=\"ui button\" onClick={handlePointChangeClick(play.points - 1, play.user)}>-</button>\n                              {play.points}\n                              <button className=\"ui button\" onClick={handlePointChangeClick(play.points + 1, play.user)}>+</button>\n                            </strong>\n                          </td>)\n                        } else {\n                          return (<td key={play.trackIndex + player.id}>{play.points}</td>)\n                        }\n                      })\n                    }\n                    <td>{total}</td>\n                  </tr>\n                )\n              } else return (\n                <tr><td>no plays</td></tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n      <br />\n      <div className=\"row\">\n        <button className=\"ui button\" text='delete last track' onClick={handleDeleteLastTrackClick}>delete last track</button>\n        <button className=\"ui button\" text='finish round' onClick={handleRoundFinishClick}>finnish round</button>\n        <button className=\"ui button\" disabled={buttonDisabled} onClick={handleUploadPointsClick}>upload points</button>\n      </div>\n      {false && <div>round is finnished</div>}\n    </div>\n  )\n}\n\nexport default Round","import React from 'react'\n\nconst AddRound = (props) => {\n  if (!props.show) {\n    return null\n  }\n  const allLocations = props.allLocationsQuery.data.allLocations\n  const allUsers = props.allUsersQuery.data.allUsers\n  const currentLocation = props.currentLocation\n  const currentPlayers = props.currentPlayers\n\n  const startNewRound = (event) => {\n    console.log('start new round with', currentLocation, currentPlayers)\n    event.preventDefault()\n    props.startNewRound()\n  }\n\n  if (props.allLocationsQuery.loading || props.allUsersQuery.loading) {\n    console.log('loading')\n    return <div>loading...</div>\n  }\n  if (props.allLocationsQuery.error || props.allUsersQuery.error) {\n    console.log('errors', props.allUsersQuery.error, props.allLocationsQuery.error)\n    return <div>error...</div>\n  }\n  if (!currentLocation) {\n    // select location\n    return (\n      <div>\n        <h3>Select location</h3>\n        <div>\n          <table className=\"ui celled table\">\n            <thead>\n              <tr key='header'>\n                <th>locations</th>\n              </tr>\n            </thead>\n            <tbody>\n              {allLocations.map(location =>\n                <tr key={location.id}>\n                  <td className='ui button' onClick={props.handleLocationClick(location)}>{location.name}</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <h3>New round</h3>\n      <div onClick={props.handleLocationClick(currentLocation)}>\n        {currentLocation.name}\n      </div>\n      <div>\n        <table className=\"ui celled table\">\n          <thead>\n            <tr key='header'>\n              <th>selected players</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              {currentPlayers.map(user =>\n                <td className='ui button' key={user.id} onClick={props.handleUserClick(user)}>{user.username}</td>\n              )}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      {\n        currentPlayers.length > 0 && currentLocation &&\n        <div>\n          <form onSubmit={startNewRound}>\n            <button className=\"ui button\" type='submit'>start</button>\n          </form>\n        </div>\n      }\n      <div>\n        <table className=\"ui celled table\">\n          <thead>\n            <tr>\n              <th>all players</th>\n            </tr>\n          </thead>\n          <tbody>\n            {allUsers.map(user =>\n              <tr key={user.id}>\n                <td className='ui button' onClick={props.handleUserClick(user)}>{user.username}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n\n    </div>\n  )\n}\n\nexport default AddRound","import React from 'react'\n\nconst Rounds = (props) => {\n  if (!props.show) {\n    return null\n  }\n  if (props.result.loading) {\n    return <div>loading...</div>\n  }\n  if (props.result.error) {\n    console.log('error', props.result.error)\n    return <div>error...</div>\n  }\n  const handleRoundClick = (round) =>\n    () => {\n      console.log('round clicked', round)\n      props.setRound(round)\n    }\n  const handleDeleteRoundClick = (round) =>\n    () => {\n      console.log('delete round clicked', round)\n      props.deleteRound(round)\n    }\n  const rounds = props.result.data.allRounds\n  rounds.sort((r1, r2) => r2.date - r1.date)\n  if (!rounds) {\n    return null\n  }\n  return (\n    <div>\n      <table className=\"ui celled table\">\n        <thead>\n          <tr key='header'>\n            <th>location</th><th>date</th><th colSpan=\"99\">players</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rounds.map(round => {\n            const d = new Date(round.date)\n            const dateString = d.getDate() + '.' + (d.getMonth() + 1) + '.' + d.getFullYear() + ' ' + d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds()\n            return (\n              <tr key={round.id}>\n                <td onClick={handleRoundClick(round)}>{round.location.name}</td><td>{dateString}</td>\n                {round.users.map(user =>\n                  <td key={user.username}>{user.username}</td>\n                )}\n                <td><button onClick={handleDeleteRoundClick(round)}>delete</button></td>\n              </tr>\n            )\n          }\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Rounds","import React, { useState } from 'react'\n\nconst LoginForm = (props) => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  if (!props.show) {\n    return null\n  }\n  const login = async (event) => {\n    event.preventDefault()\n    props.doLogin(username, password)\n  }\n  const onPasswordChange = (event) => {\n    setPassword(event.target.value)\n  }\n  const onUsernameChange = (event) => {\n    setUsername(event.target.value)\n  }\n  return (\n    <div className='login'>\n      <h2>Login to application</h2>\n      <form onSubmit={login} className=\"ui form\">\n        <div className=\"field\">\n          <label>Username</label>\n          <input id='username'\n            type=\"text\"\n            placeholder=\"username\"\n            value={username}\n            onChange={onUsernameChange} />\n        </div>\n        <div className=\"field\">\n          <label>Password</label>\n          <input id='password'\n            type=\"password\"\n            placeholder=\"password\"\n            value={password}\n            onChange={onPasswordChange} />\n        </div>\n        <button className=\"ui button\" type=\"submit\">\n          login\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm","import gql from \"graphql-tag\";\nexport const LOGIN = gql`\nmutation login($username: String!, $password: String! ){\n  login(username: $username, password: $password){\n    token\n    username\n  }\n  \n}\n`\nexport const ALL_FRIENDS = gql`\n{\n  me {\n    username\n    id\n    friends{username, id}\n  }\n}\n`\nexport const ALL_LOCATIONS = gql`\n{\n  allLocations {\n    name\n    id\n  }\n}  \n`\nexport const ALL_ROUNDS = gql`\n{\n  allRounds {\n    users{username, id}\n    location{name, id}\n    date\n    id\n  }\n}\n`\nexport const ALL_POINTS = gql`\n  query ($roundId: ID!) {\n    allPoints(\n      roundId: $roundId\n    ){\n    trackIndex,\n    user{id},\n    round{id},\n    points,\n    id\n    }\n  }\n`\nexport const ALL_USERS = gql`\nquery {\n  allUsers{\n    username,\n    id\n  }\n}\n`\nexport const ME = gql`\n{\n  me{\n    username\n    id\n  }\n}\n`\nexport const ADD_LOCATION = gql`\n  mutation createLocation($name: String!){\n    addLocation(\n      name: $name\n    ){\n      id, name\n    }\n  }\n`\nexport const ADD_ROUND = gql`\n  mutation createRound($locationId: ID!, $userIds: [ID!]!){\n    addRound(\n      locationId: $locationId\n      userIds: $userIds\n    ){\n      location{\n        name\n        id\n      }\n      users{\n        username\n        id\n      }\n      date\n      id\n    }\n  }\n`\nexport const DELETE_ROUND = gql`\n  mutation removeRound($roundId: ID!){\n    deleteRound(\n      roundId: $roundId\n    ){\n      id\n    }\n  }\n`\nexport const ADD_PLAY = gql`\n  mutation createPlay($roundId: ID!, $playNumber:Int!){\n    addPlay(\n      roundId: $roundId,\n      playNumber: $playNumber\n    ){\n      id\n    }\n  }\n`\n\nexport const ADD_CACHED_POINTS = gql`\n  mutation addCachedPoints($roundId: ID!, $pointIds: [ID!]!, $userIds: [ID!]!, $trackIndexes:[Int!]!, $points: [Int!]!){\n    addCachedPoints(\n      roundId: $roundId,\n      pointIds: $pointIds,\n      userIds: $userIds,\n      trackIndexes: $trackIndexes,\n      points: $points\n    ){\n      trackIndex,\n      user{id},\n      round{id},\n      points,\n      id\n    }\n  }\n`\n","import React, { useState, useEffect } from \"react\";\n\nfunction useTimeout(doLogout) {\n  const signoutTime = 1000 * 60 * 60\n  let logoutTimeout;\n\n  const warn = () => {\n    console.log('Warning');\n  };\n  const logout = () => {\n    console.log('You have been loged out');\n    doLogout()\n  }\n\n  const setTimeouts = () => {\n    //    warnTimeout = setTimeout(warn, warningTime);\n    logoutTimeout = setTimeout(logout, signoutTime);\n  };\n\n  const clearTimeouts = () => {\n    //  if (warnTimeout) clearTimeout(warnTimeout);\n    if (logoutTimeout) clearTimeout(logoutTimeout);\n  };\n\n  useEffect(() => {\n    const events = [\n      'load',\n      'mousedown',\n      'click',\n      'scroll',\n      'keypress'\n    ];\n\n    const resetTimeout = () => {\n      clearTimeouts();\n      setTimeouts();\n    };\n\n    for (let i in events) {\n      window.addEventListener(events[i], resetTimeout);\n    }\n\n    setTimeouts();/*\n    return () => {\n      console.log('loop called')\n      for (let i in events) {\n        window.removeEventListener(events[i], resetTimeout);\n        clearTimeouts();\n      }\n    }*/\n  }, []);\n}\n\nexport default useTimeout","import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useApolloClient } from 'react-apollo-hooks'\nimport { Container, Menu, Router } from 'semantic-ui-react'\nimport Navigation from './components/Navigation'\nimport Round from './components/Round'\nimport AddRound from './components/AddRound'\nimport Rounds from './components/Rounds'\nimport LoginForm from './components/LoginForm'\nimport Friends from './components/Friends'\nimport Me from './components/Me'\nimport crypto from 'crypto'\nimport {\n  ALL_FRIENDS,\n  ALL_LOCATIONS,\n  ALL_ROUNDS,\n  ALL_POINTS,\n  ALL_USERS,\n  LOGIN,\n  ADD_LOCATION,\n  ADD_ROUND,\n  DELETE_ROUND,\n  ADD_CACHED_POINTS,\n} from './querys'\nimport useTimeout from './useTimeout'\n\nconst App = (props) => {\n  const [currentRoundId, setCurrentRoundId] = useState(null)\n  const [currentRound, setCurrentRound] = useState(null)\n  const [currentPlayers, setCurrentPlayers] = useState([])\n  const [currentLocation, setCurrentLocation] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [trackIndex, setTrackIndex] = useState(0)\n  const [token, setToken] = useState(null)\n  const [username, setUsername] = useState(null)\n  const [page, setPage] = useState(\"main\")\n  const client = useApolloClient()\n  const [savedState, setSavedState] = useState(true)\n  const [uploadingPointsState, setUploadingPointsState] = useState(false)\n\n  useEffect(() => {\n    const username = localStorage.getItem('username')\n    const token = localStorage.getItem('token')\n    console.log('restore logged user', username, token)\n    setToken(token)\n    setUsername(username)\n  }, [])\n\n  const getRandomId = () => {\n    return crypto.randomBytes(16).toString(\"hex\")\n  }\n\n  const doLogin = async (username, password) => {\n    const response = await loginMutation({\n      variables: {\n        username,\n        password\n      }\n    })\n    const token = response.data.login.token\n    const tusername = response.data.login.username\n    console.log('login token and username', token, tusername)\n    if (token) {\n      //localStorage.setItem('token', token)\n      setToken(token)\n      setUsername(username)\n      localStorage.setItem('username', tusername)\n      localStorage.setItem('token', token)\n      setPage('main')\n      client.resetStore()\n    }\n  }\n\n  const doLogout = () => {\n    console.log('logout')\n    setToken(null)\n    setUsername(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n  useTimeout(doLogout)\n  if (props.sessionTimeout) {\n    console.log('session time out received')\n    doLogout()\n  }\n  const handleError = (error) => {\n    console.log('error', error)\n    if (error.graphQLErrors.length > 0) {\n      setErrorMessage(error.graphQLErrors[0].message)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 10000)\n    }\n    else if (error.networkError) {\n      const errorArray = error.networkError.result.errors\n      if (errorArray && errorArray.length > 0) {\n        setErrorMessage(errorArray[0].message)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 10000)\n      }\n    }\n  }\n\n\n  // uploads cached points to server\n  const addCachedPointsMutation = useMutation(ADD_CACHED_POINTS, {\n    onError: handleError,\n    update: (store, response) => {\n      const serverPoints = response.data.addCachedPoints\n      let dataInStore = store.readQuery({\n        query: ALL_POINTS,\n        variables: {\n          roundId: currentRoundId\n        },\n      })\n      const localPoints = dataInStore.allPoints\n      setSavedState(true)\n      console.log('local and server lengths', localPoints.length, serverPoints.length)\n      if (serverPoints.length !== localPoints.length) {\n        setSavedState(false)\n\n      } else {\n        serverPoints.forEach(serverPoint => {\n          let foundMatch = false\n          localPoints.forEach(localPoint => {\n            if (serverPoint.round.id === localPoint.round.id\n              && serverPoint.user.id === localPoint.user.id\n              && serverPoint.trackIndex === localPoint.trackIndex\n              && serverPoint.points === localPoint.points) {\n              foundMatch = true\n              console.log('found match')\n              return\n            }\n          })\n          if (!foundMatch) {\n            console.log('set saved state to false')\n            setSavedState(false)\n          }\n        });\n      }\n      console.log('local and server points', localPoints, serverPoints)\n    }\n  })\n\n  const addRoundMutation = useMutation(ADD_ROUND, {\n    onError: handleError,\n    update: (store, response) => {\n      let dataInStore = store.readQuery({\n        query: ALL_ROUNDS\n      })\n      const addedRound = response.data.addRound\n      const temp = dataInStore.allRounds.filter(round => round.id !== addedRound.id).concat(addedRound)\n      client.writeQuery({\n        query: ALL_ROUNDS,\n        data: { allRounds: temp }\n      })\n    }\n  })\n  const deleteRoundMutation = useMutation(DELETE_ROUND, {\n    onError: handleError,\n    update: (store, response) => {\n      let dataInStore = store.readQuery({\n        query: ALL_ROUNDS\n      })\n      const deletedRound = response.data.deleteRound\n      console.log('deleted round', deletedRound, 'rounds before', dataInStore.allRounds)\n      const temp = dataInStore.allRounds.filter(round => round.id !== deletedRound.id)\n      console.log('new data in store', temp)\n      client.writeQuery({\n        query: ALL_ROUNDS,\n        data: { allRounds: temp }\n      })\n    }\n  })\n  const loginMutation = useMutation(LOGIN, {\n    onError: handleError\n  })\n  const addNewTrackToCache = () => {\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: currentRoundId\n      }\n    })\n    const allPoints = originalState.allPoints\n    console.log('all points', allPoints)\n    let max = -1\n    allPoints.forEach(point => {\n      if (point.trackIndex > max) {\n        max = point.trackIndex\n      }\n    })\n    currentRound.users.forEach(player => {\n      addPointToCache(currentRoundId, player.id, max + 1, 3)\n    })\n    //TODO: get max track index and add new track\n  }\n  const addPointToCache = (roundId, userId, trackIndex, points) => {\n    console.log('add point with roundId userId, trackindex, points', roundId, userId, trackIndex, points)\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      }\n    })\n    console.log('original state', originalState.allPoints)\n    const temp = originalState.allPoints.filter(point =>\n      point.user.id === userId && point.trackIndex === trackIndex)\n    console.log('found data from cache', temp.length > 0 ? temp : false)\n    if (temp.length > 0) {\n      const data = temp[0]\n      console.log('new state', originalState.allPoints\n        .filter(point => point.id !== data.id)\n        .concat({\n          ...data,\n          points\n        }))\n      client.writeQuery({\n        query: ALL_POINTS,\n        variables: {\n          roundId: roundId\n        },\n        data: {\n          allPoints: originalState.allPoints\n            .filter(point => point.id !== data.id)\n            .concat({\n              ...data,\n              points\n            })\n        }\n      })\n    } else {\n      const newPoint = {\n        round: { id: roundId, __typename: \"Round\" },\n        user: { id: userId, __typename: \"User\" },\n        trackIndex,\n        points,\n        id: getRandomId(),\n        __typename: 'Point'\n      }\n      console.log('add new point', newPoint)\n      client.writeQuery({\n        query: ALL_POINTS,\n        variables: {\n          roundId: roundId\n        },\n        data: {\n          allPoints: originalState.allPoints\n            .concat(newPoint)\n        }\n      })\n    }\n    setSavedState(false)\n    /*\n    const mutatedState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      }\n    })\n    console.log('mutated state', mutatedState.allPoints)\n    */\n  }\n  const deleteLastTrackFromCache = (roundId) => {\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      }\n    })\n    if (originalState.allPoints.length === 0) {\n      return\n    }\n    console.log('original state', originalState.allPoints)\n    const maxTrackIndex = originalState.allPoints\n      .map(point => point.trackIndex)\n      .sort((i1, i2) => i2 - i1)[0]\n    console.log('maxTrackindex', maxTrackIndex)\n    client.writeQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      },\n      data: {\n        allPoints: originalState.allPoints.filter(point => point.trackIndex !== maxTrackIndex)\n      }\n    })\n    setSavedState(false)\n    if (trackIndex >= maxTrackIndex) {\n      setTrackIndex(maxTrackIndex - 1)\n    }\n    /*\n    const mutatedState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      }\n    })\n    console.log('mutated state', mutatedState.allPoints)\n    */\n  }\n\n  const uploadPointsFromCacheToServer = async () => {\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: currentRoundId\n      }\n    })\n    if (originalState.allPoints.length === 0) {\n      return\n    }\n    const allPoints = originalState.allPoints\n    console.log('upload points from cache to server', allPoints)\n    try {\n      await setUploadingPointsState(true)\n      //await setSavedState(true)\n      let response = await addCachedPointsMutation({\n        variables: {\n          roundId: currentRoundId,\n          pointIds: allPoints.map(point => point.id.toString()),\n          userIds: allPoints.map(point => point.user.id.toString()),\n          trackIndexes: allPoints.map(point => point.trackIndex),\n          points: allPoints.map(point => point.points)\n        }\n      })\n      setUploadingPointsState(false)\n      console.log('response', response)\n      console.log('server and local state match', savedState)\n    } catch (error) {\n      handleError(error)\n    }\n  }\n\n  const addNewTrack = async () => {\n    const currentUsers = currentRound.users\n    console.log('add new track to round and trackindex', currentRound.id, currentRoundId, 'for users', currentUsers)\n    //try {\n    for (let i = 0; i < currentUsers.length; i++) {\n      addPointToCache(currentRoundId, currentUsers[i].id, currentRoundId + 1, 3)\n    }\n  }\n\n  const deleteLastTrack = async () => {\n    console.log('delete last track')\n    deleteLastTrackFromCache(currentRoundId)\n  }\n  const updatePoint = async (points, userId) => {\n    console.log('add point with points and userId', points, 'trackIndex', trackIndex, userId, currentRoundId)\n    addPointToCache(currentRoundId, userId, trackIndex, points)\n  }\n\n  const changeTrack = (index) => {\n    setTrackIndex(index)\n  }\n  const setNewRound = (round) => {\n    console.log('round', round)\n    setCurrentRound(round)\n    setCurrentRoundId(round.id)\n    setTrackIndex(-1)\n  }\n  const allLocationsQuery = useQuery(ALL_LOCATIONS)\n  const allUsersQuery = useQuery(ALL_USERS, {\n    skip: false\n  })\n  const allPointsQuery = useQuery(ALL_POINTS, {\n    skip: !currentRoundId,\n    variables: {\n      roundId: currentRoundId\n    },\n  })\n\n  const allRoundsQuery = useQuery(ALL_ROUNDS, {\n    skip: false\n  })\n  const handleLocationClick = (location) =>\n    () => {\n      console.log('location clicked', location)\n      if (location === currentLocation) {\n        setCurrentLocation(null)\n      } else {\n        setCurrentLocation(location)\n      }\n    }\n  const handleUserClick = (user) =>\n    () => {\n      console.log('user clicked', user)\n      if (currentPlayers.includes(user)) {\n        setCurrentPlayers(currentPlayers.filter(player => player !== user))\n      } else {\n        setCurrentPlayers(currentPlayers.concat(user))\n      }\n    }\n  const deleteRound = async (round) => {\n    console.log('delte round with id', round.id)\n    const response = await deleteRoundMutation(\n      {\n        variables: {\n          roundId: round.id\n        }\n      }\n    )\n    console.log('response', response)\n  }\n  const startNewRound = async () => {\n    console.log('start new round', currentLocation.id, currentPlayers.map(user => user.id))\n    const response = await addRoundMutation(\n      {\n        variables: {\n          userIds: currentPlayers.map(user => user.id),\n          locationId: currentLocation.id\n        }\n      }\n    )\n    console.log('response', response)\n    //setCurrentLocation(null)\n    //setCurrentPlayers([])\n    setCurrentRound(response.data.addRound)\n    setCurrentRoundId(response.data.addRound.id)\n  }\n  const finishRound = () => {\n    console.log('finish round')\n    setCurrentRound(null)\n    setCurrentRoundId(null)\n    setCurrentPlayers([])\n    setCurrentLocation(null)\n    setPage('main')\n  }\n\n  return (\n    <Container>\n      {token && <Navigation show={true}\n        doLogout={doLogout}\n        setPage={setPage}\n        username={username}\n        currentRoundId={currentRoundId} />\n      }\n      {errorMessage && <div>errorMessage</div>\n      }\n      {!token &&\n        <LoginForm\n          doLogin={doLogin}\n          show={true}\n          handleError={handleError} />\n      }\n      {token && !currentRoundId && <AddRound\n        allLocationsQuery={allLocationsQuery}\n        allUsersQuery={allUsersQuery}\n        handleLocationClick={handleLocationClick}\n        handleUserClick={handleUserClick}\n        currentLocation={currentLocation}\n        currentPlayers={currentPlayers}\n        startNewRound={startNewRound}\n        show={page === 'round'}\n      />}\n      {token && <Rounds\n        result={allRoundsQuery}\n        setRound={setNewRound}\n        deleteRound={deleteRound}\n        show={page === 'main'}\n      />}\n      {token && currentRoundId && <Round\n        allPointsQuery={allPointsQuery}\n        round={currentRound}\n        addNewTrack={addNewTrackToCache}\n        updatePoint={updatePoint}\n        deleteLastTrack={deleteLastTrack}\n        changeTrack={changeTrack}\n        trackIndex={trackIndex}\n        finishRound={finishRound}\n        uploadPoints={uploadPointsFromCacheToServer}\n        show={page === 'round'}\n        savedState={savedState}\n        uploadingPoints={uploadingPointsState}\n      />}\n      <div>\n        <br />\n        <em>Frisbeegolf app, Juho Taipale 2019</em>\n      </div>\n    </Container>\n  )\n\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks'\n\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\nconst wshost = window.location.origin.replace(/^http/, 'ws')\nlet wsuri = `${wshost}/graphql`\nlet httpUri = '/graphql'\nif (process.env.NODE_ENV !== 'production') {\n  console.log('development or testing environment')\n  httpUri = 'http://localhost:4000/graphql'\n  wsuri = `ws://localhost:4000/graphql`\n  //httpUri = 'http://frisbeegolfappi.herokuapp.com/graphql'\n  //wsuri = `ws://frisbeegolfappi.herokuapp.com/graphql`\n}\nconsole.log('websocket uri', wsuri)\nconsole.log('http uri', httpUri)\n\nconst wsLink = new WebSocketLink({\n  uri: wsuri,\n  options: { reconnect: true }\n})\n\nconst httpLink = createHttpLink({\n  uri: httpUri,\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('token')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <App />\n    </ApolloHooksProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}
{"version":3,"sources":["components/Navigation.js","components/Round.js","components/AddRound.js","components/Rounds.js","components/LoginForm.js","querys.js","useTimeout.js","App.js","index.js"],"names":["Navigation","props","show","meQuery","loading","error","console","log","setPage","page","user","data","me","currentRoundId","className","onClick","username","admin","doLogout","Round","round","allPointsQuery","savedState","uploadingPoints","buttonDisabled","players","users","trackIndex","allPoints","order","slice","maxTrackIndex","arr","def","temp","forEach","element","maxValue","map","play","changeTrack","length","addNewTrack","handleTrackIndexChangeClick","index","handlePointChangeClick","points","updatePoint","id","sort","u1","u2","i","filter","point","u1pointArray","u2pointArray","u1p","u2p","trackNumbers","push","key","location","name","text","player","playerPlays","p1","p2","total","reduce","tot","orderOf","deleteLastTrack","finishRound","disabled","uploadPoints","AddRound","allLocations","allLocationsQuery","allUsers","allUsersQuery","currentLocation","currentPlayers","handleLocationClick","handleUserClick","onSubmit","event","preventDefault","startNewRound","type","Rounds","result","handleRoundClick","setRound","handleDeleteRoundClick","deleteRound","rounds","allRounds","r1","r2","date","colSpan","d","Date","dateString","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","LoginForm","useState","setUsername","password","setPassword","a","async","doLogin","placeholder","value","onChange","target","LOGIN","gql","ALL_LOCATIONS","ALL_ROUNDS","ALL_POINTS","ALL_USERS","ME","ADD_ROUND","DELETE_ROUND","ADD_CACHED_POINTS","useTimeout","logoutTimeout","logout","setTimeouts","setTimeout","useEffect","events","resetTimeout","clearTimeout","window","addEventListener","App","setCurrentRoundId","currentRound","setCurrentRound","setCurrentPlayers","setCurrentLocation","errorMessage","setErrorMessage","setTrackIndex","token","setToken","client","useApolloClient","setSavedState","uploadingPointsState","setUploadingPointsState","localStorage","getItem","clear","resetStore","sessionTimeout","handleError","graphQLErrors","message","networkError","errorArray","errors","addCachedPointsMutation","useMutation","onError","update","store","response","serverPoints","addCachedPoints","localPoints","readQuery","query","variables","roundId","serverPoint","foundMatch","localPoint","addRoundMutation","dataInStore","addedRound","addRound","concat","writeQuery","deleteRoundMutation","deletedRound","loginMutation","addPointToCache","userId","originalState","newPoint","__typename","crypto","randomBytes","toString","deleteLastTrackFromCache","i1","i2","useQuery","skip","allRoundsQuery","Container","login","tusername","setItem","includes","userIds","locationId","max","pointIds","trackIndexes","wshost","origin","replace","wsuri","wsLink","WebSocketLink","uri","options","reconnect","httpLink","createHttpLink","authLink","setContext","_","headers","authorization","link","split","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"2TAqCeA,EAnCI,SAACC,GAClB,IAAKA,EAAMC,KACT,OAAO,KAGT,GAAID,EAAME,QAAQC,QAChB,OAAO,2CAET,GAAIH,EAAME,QAAQE,MAEhB,OADAC,QAAQC,IAAI,QAASN,EAAME,QAAQE,OAC5B,yCAGT,IAAMG,EAAU,SAACC,GACfR,EAAMO,QAAQC,IAKVC,EAAOT,EAAME,QAAQQ,KAAKC,GAC1BC,EAAiBZ,EAAMY,eAC7B,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,OAAOC,QAAS,WAAQP,EAAQ,QAASF,QAAQC,IAAI,UAApE,QACCM,EACC,yBAAKC,UAAU,OAAOC,QAAS,WAAQP,EAAQ,SAAUF,QAAQC,IAAI,oBAArE,kBACE,yBAAKO,UAAU,OAAOC,QAAS,WAAQP,EAAQ,SAAUF,QAAQC,IAAI,eAArE,aAEJ,yBAAKO,UAAU,QAAQJ,EAAKM,SAA5B,IAAuCN,EAAKO,MAAQ,WAAa,GAAjE,aACA,yBAAKH,UAAU,OAAOC,QAAS,WAAQP,EAAQ,MAZjDP,EAAMiB,aAYJ,YCsJSC,EAzKD,SAAClB,GACb,IAAKA,EAAMC,KACT,OAAO,KAGT,IAAKD,EAAMmB,MAET,OADAd,QAAQC,IAAI,mBACL,KAET,GAAIN,EAAMoB,eAAejB,QAEvB,OADAE,QAAQC,IAAI,WACL,2CAET,GAAIN,EAAMoB,eAAehB,MAEvB,OADAC,QAAQC,IAAI,QAASN,EAAMoB,eAAehB,OACnC,yCAGT,IAAMiB,EAAarB,EAAMqB,WACnBC,EAAkBtB,EAAMsB,gBACxBC,EAAiBF,GAAcC,EAC/BE,EAAUxB,EAAMmB,MAAMM,MACtBC,EAAa1B,EAAM0B,WACnBC,EAAY3B,EAAMoB,eAAeV,KAAKiB,UACtCR,EAAQnB,EAAMmB,MAChBS,EAAQJ,EAAQK,QACpBxB,QAAQC,IAAI,aAAcqB,GAG1B,IAAMG,EAvCS,SAACC,GAAmB,IAAdC,EAAa,wDAAN,EACxBC,EAAOD,EAMX,OALAD,EAAIG,SAAQ,SAAAC,GACNF,EAAOE,IACTF,EAAOE,MAGJF,EAgCeG,CAAST,EAAUU,KAAI,SAAAC,GAAI,OAAIA,EAAKZ,eAAc,GACxE,IAAoB,IAAhBA,GAAqBI,GAAiB,EAExC,OADA9B,EAAMuC,YAAYT,GACX,KAEgB,IAArBH,EAAUa,SACZnC,QAAQC,IAAI,YAAaN,EAAMmB,OAC/BnB,EAAMyC,cACNzC,EAAMuC,YAAY,IAEpB,IASMG,EAA8B,SAACC,GAAD,OAClC,WACEtC,QAAQC,IAAI,YAAaqC,EAAO,YAAab,GACzCA,EAAgB,IAAMa,IACxBtC,QAAQC,IAAI,iBACZN,EAAMyC,eAERzC,EAAMuC,YAAYI,KAEhBC,EAAyB,SAACC,EAAQpC,GAAT,OAC7B,WACMoC,GAAU,GACZ7C,EAAM8C,YAAYD,EAAQpC,EAAKsC,MAGrCnB,EAAMoB,MAAK,SAACC,EAAIC,GACd,IADsB,IAAD,WACZC,GACP,IAAMlB,EAAON,EAAUyB,QAAO,SAAAC,GAAK,OAAIA,EAAM3B,aAAeyB,KACtDG,EAAerB,EAAKmB,QAAO,SAAAC,GAAK,OAAIA,EAAM5C,KAAKsC,KAAOE,EAAGF,MACzDQ,EAAetB,EAAKmB,QAAO,SAAAC,GAAK,OAAIA,EAAM5C,KAAKsC,KAAOG,EAAGH,MAC/D,GAA4B,IAAxBO,EAAad,QAAwC,IAAxBe,EAAaf,OAC5C,MAAM,CAAN,EAAO,GAET,IAAMgB,EAAMF,EAAa,GAAGT,OACtBY,EAAMF,EAAa,GAAGV,OAC5B,OAAIW,EAAMC,EACF,CAAN,EAAO,GACED,EAAMC,EACT,CAAN,GAAQ,QADH,GAXAN,EAAIzB,EAAYyB,GAAK,EAAGA,IAAK,CAAC,IAAD,IAA7BA,GAA6B,kCAetC,OAAO,KAGT,IAUMO,EAAe,GACrBrD,QAAQC,IAAI,kBAAmBwB,EAAe,cAAeJ,GAC7D,IAAK,IAAIyB,EAAI,EAAGA,EAAIrB,EAAgB,EAAGqB,IACrCO,EAAaC,KAAK,wBAAIC,IAAKT,GAAIA,EAAI,IAGrC,OADA9C,QAAQC,IAAI,mBAAoBoD,EAAc,aAAc/B,GAE1D,yBAAKd,UAAU,OACZQ,GAAc,6CACbA,GAAc,6BAAK,kDACrB,6BACE,4BAAKF,EAAM0C,SAASC,MACpB,4BACE,yBAAKjD,UAAU,OACb,4BAAQkD,KAAK,IAAIjD,QAAS4B,EAA4BhB,EAAa,IAAnE,KADF,SAESA,EAAa,EACpB,4BAAQqC,KAAK,IAAIjD,QAAS4B,EAA4BhB,EAAa,IAAnE,OAGJ,2BAAOb,UAAU,mBACf,+BACE,4BACE,qCAAc,sCAEZ6C,EAEF,uCAGJ,+BAEGlC,EAAQa,KAAI,SAAA2B,GACX,IAAMC,EAActC,EAAUyB,QAAO,SAAAC,GAAK,OAAIA,EAAM5C,KAAKsC,KAAOiB,EAAOjB,MACvE,GAAIkB,EAAa,CACfA,EAAYjB,MAAK,SAACkB,EAAIC,GAAL,OAAYD,EAAGxC,WAAayC,EAAGzC,cAChD,IAAM0C,EAA+B,IAAvBH,EAAYzB,OACxB,EAAIyB,EAAY5B,KAAI,SAAAC,GAAI,OAAIA,EAAKO,UAAQwB,QAAO,SAACC,EAAKjB,GAAN,OAAgBiB,EAAMjB,KACxE,OACE,wBAAKO,IAAKI,EAAOjB,IACf,wBAAIa,IAAI,SAjDV,SAACI,GACf,IAAK,IAAIb,EAAI,EAAGA,EAAIvB,EAAMY,OAAQW,IAChC,GAAIa,IAAWpC,EAAMuB,GACnB,OAAOA,EAAI,EAAI,IAGnB,MAAO,MA2C0BoB,CAAQP,IACzB,wBAAIJ,IAAKI,EAAOjD,UAAWiD,EAAOjD,UAEhCkD,EAAY5B,KAAI,SAAAC,GACd,OAAIA,EAAKZ,aAAeA,EACd,wBAAIkC,IAAKtB,EAAKZ,WAAasC,EAAOjB,IACxC,gCACE,4BAAQlC,UAAU,YAAYC,QAAS8B,EAAuBN,EAAKO,OAAS,EAAGP,EAAK7B,OAApF,KACC6B,EAAKO,OACN,4BAAQhC,UAAU,YAAYC,QAAS8B,EAAuBN,EAAKO,OAAS,EAAGP,EAAK7B,OAApF,OAII,wBAAImD,IAAKtB,EAAKZ,WAAasC,EAAOjB,IAAKT,EAAKO,WAI1D,4BAAKuB,IAGJ,OACL,4BAAI,+CAMd,6BACA,yBAAKvD,UAAU,OACb,4BAAQA,UAAU,YAAYkD,KAAK,oBAAoBjD,QAzH1B,WACjCd,EAAMwE,oBAwHF,qBACA,4BAAQ3D,UAAU,YAAYkD,KAAK,eAAejD,QAvHzB,WAC7Bd,EAAMyE,gBAsHF,iBACA,4BAAQ5D,UAAU,YAAY6D,SAAUnD,EAAgBT,QArH9B,WAC9Bd,EAAM2E,iBAoHF,mBAED,IC5EQC,EAlGE,SAAC5E,GAChB,IAAKA,EAAMC,KACT,OAAO,KAET,IAAM4E,EAAe7E,EAAM8E,kBAAkBpE,KAAKmE,aAC5CE,EAAW/E,EAAMgF,cAActE,KAAKqE,SACpCE,EAAkBjF,EAAMiF,gBACxBC,EAAiBlF,EAAMkF,eAQ7B,OAAIlF,EAAM8E,kBAAkB3E,SAAWH,EAAMgF,cAAc7E,SACzDE,QAAQC,IAAI,WACL,4CAELN,EAAM8E,kBAAkB1E,OAASJ,EAAMgF,cAAc5E,OACvDC,QAAQC,IAAI,SAAUN,EAAMgF,cAAc5E,MAAOJ,EAAM8E,kBAAkB1E,OAClE,0CAEJ6E,EAyBH,6BACE,yCACA,yBAAKnE,QAASd,EAAMmF,oBAAoBF,IACrCA,EAAgBnB,MAEnB,6BACE,2BAAOjD,UAAU,mBACf,+BACE,wBAAI+C,IAAI,UACN,kDAGJ,+BACE,4BACGsB,EAAe7C,KAAI,SAAA5B,GAAI,OACtB,wBAAII,UAAU,YAAY+C,IAAKnD,EAAKsC,GAAIjC,QAASd,EAAMoF,gBAAgB3E,IAAQA,EAAKM,iBAO5FmE,EAAe1C,OAAS,GAAKyC,GAC7B,6BACE,0BAAMI,SA/DQ,SAACC,GACrBjF,QAAQC,IAAI,uBAAwB2E,EAAiBC,GACrDI,EAAMC,iBACNvF,EAAMwF,kBA6DE,4BAAQ3E,UAAU,YAAY4E,KAAK,UAAnC,WAIN,6BACE,2BAAO5E,UAAU,mBACf,+BACE,4BACE,6CAGJ,+BACGkE,EAAS1C,KAAI,SAAA5B,GAAI,OAChB,wBAAImD,IAAKnD,EAAKsC,IACZ,wBAAIlC,UAAU,YAAYC,QAASd,EAAMoF,gBAAgB3E,IAAQA,EAAKM,kBA7DhF,6BACE,+CACA,6BACE,2BAAOF,UAAU,mBACf,+BACE,wBAAI+C,IAAI,UACN,2CAGJ,+BACGiB,EAAaxC,KAAI,SAAAwB,GAAQ,OACxB,wBAAID,IAAKC,EAASd,IAChB,wBAAIlC,UAAU,YAAYC,QAASd,EAAMmF,oBAAoBtB,IAAYA,EAASC,eCiBrF4B,EAvDA,SAAC1F,GACd,IAAKA,EAAMC,KACT,OAAO,KAET,GAAID,EAAM2F,OAAOxF,QACf,OAAO,2CAET,GAAIH,EAAM2F,OAAOvF,MAEf,OADAC,QAAQC,IAAI,QAASN,EAAM2F,OAAOvF,OAC3B,yCAET,IAAMwF,EAAmB,SAACzE,GAAD,OACvB,WACEd,QAAQC,IAAI,gBAAiBa,GAC7BnB,EAAM6F,SAAS1E,KAEb2E,EAAyB,SAAC3E,GAAD,OAC7B,WACEd,QAAQC,IAAI,uBAAwBa,GACpCnB,EAAM+F,YAAY5E,KAEhB6E,EAAShG,EAAM2F,OAAOjF,KAAKuF,UAEjC,OADAD,EAAOhD,MAAK,SAACkD,EAAIC,GAAL,OAAYA,EAAGC,KAAOF,EAAGE,QAChCJ,EAIH,6BACE,2BAAOnF,UAAU,mBACf,+BACE,wBAAI+C,IAAI,UACN,wCAAiB,oCAAa,wBAAIyC,QAAQ,MAAZ,aAGlC,+BACGL,EAAO3D,KAAI,SAAAlB,GACV,IAAMmF,EAAI,IAAIC,KAAKpF,EAAMiF,MACnBI,EAAaF,EAAEG,UAAY,KAAOH,EAAEI,WAAa,GAAK,IAAMJ,EAAEK,cAAgB,IAAML,EAAEM,WAAa,IAAMN,EAAEO,aAAe,IAAMP,EAAEQ,aACxI,OACE,wBAAIlD,IAAKzC,EAAM4B,IACb,wBAAIjC,QAAS8E,EAAiBzE,IAASA,EAAM0C,SAASC,MAAU,4BAAK0C,GACpErF,EAAMM,MAAMY,KAAI,SAAA5B,GAAI,OACnB,wBAAImD,IAAKnD,EAAKM,UAAWN,EAAKM,aAEhC,4BAAI,4BAAQD,QAASgF,EAAuB3E,IAAxC,kBApBT,MCoBI4F,EA5CG,SAAC/G,GAAW,IAAD,EACKgH,mBAAS,IADd,mBACpBjG,EADoB,KACVkG,EADU,OAEKD,mBAAS,IAFd,mBAEpBE,EAFoB,KAEVC,EAFU,KAG3B,IAAKnH,EAAMC,KACT,OAAO,KAYT,OACE,yBAAKY,UAAU,SACb,oDACA,0BAAMwE,SAbI,SAAOC,GAAP,SAAA8B,EAAAC,OAAA,gDACZ/B,EAAMC,iBACNvF,EAAMsH,QAAQvG,EAAUmG,GAFZ,sCAaarG,UAAU,WAC/B,yBAAKA,UAAU,SACb,2CACA,2BAAOkC,GAAG,WACR0C,KAAK,OACL8B,YAAY,WACZC,MAAOzG,EACP0G,SAbe,SAACnC,GACxB2B,EAAY3B,EAAMoC,OAAOF,WAcrB,yBAAK3G,UAAU,SACb,2CACA,2BAAOkC,GAAG,WACR0C,KAAK,WACL8B,YAAY,WACZC,MAAON,EACPO,SAxBe,SAACnC,GACxB6B,EAAY7B,EAAMoC,OAAOF,WAyBrB,4BAAQ3G,UAAU,YAAY4E,KAAK,UAAnC,Y,ugFCrCD,IAAMkC,EAAQC,IAAH,KAkBLC,GATcD,IAAH,KASKA,IAAH,MAQbE,EAAaF,IAAH,KAUVG,EAAaH,IAAH,KAaVI,EAAYJ,IAAH,KAQTK,EAAKL,IAAH,KAkBFM,GATeN,IAAH,KASAA,IAAH,MAmBTO,EAAeP,IAAH,KAoBZQ,GAXWR,IAAH,KAWYA,IAAH,MC9DfS,MAnDf,SAAoBpH,GAClB,IACIqH,EAKEC,EAAS,WACblI,QAAQC,IAAI,2BACZW,KAGIuH,EAAc,WAElBF,EAAgBG,WAAWF,EAbT,OAqBpBG,qBAAU,WACR,IAAMC,EAAS,CACb,OACA,YACA,QACA,SACA,YAGIC,EAAe,WAZjBN,GAAeO,aAAaP,GAc9BE,KAGF,IAAK,IAAIrF,KAAKwF,EACZG,OAAOC,iBAAiBJ,EAAOxF,GAAIyF,GAGrCJ,MAQC,KCuZUQ,EAjbH,SAAChJ,GAAW,IAAD,EACuBgH,mBAAS,MADhC,mBACdpG,EADc,KACEqI,EADF,OAEmBjC,mBAAS,MAF5B,mBAEdkC,EAFc,KAEAC,EAFA,OAGuBnC,mBAAS,IAHhC,mBAGd9B,EAHc,KAGEkE,EAHF,OAIyBpC,mBAAS,MAJlC,mBAId/B,EAJc,KAIGoE,EAJH,OAKmBrC,mBAAS,MAL5B,mBAKdsC,EALc,KAKAC,EALA,OAMevC,mBAAS,GANxB,mBAMdtF,EANc,KAMF8H,EANE,OAOKxC,mBAAS,MAPd,mBAOdyC,EAPc,KAOPC,EAPO,OAQW1C,mBAAS,MARpB,mBAQJC,IARI,cASGD,mBAAS,QATZ,qBASdxG,GATc,MASRD,GATQ,MAUfoJ,GAASC,cAVM,GAWe5C,oBAAS,GAXxB,qBAWd3F,GAXc,MAWFwI,GAXE,SAYmC7C,oBAAS,GAZ5C,qBAYd8C,GAZc,MAYQC,GAZR,MAcrBrB,qBAAU,WACR,IAAM3H,EAAWiJ,aAAaC,QAAQ,YAChCR,EAAQO,aAAaC,QAAQ,SACnC5J,QAAQC,IAAI,sBAAuBS,EAAU0I,GAC7CC,EAASD,GACTxC,GAAYlG,KACX,IAEH,IAyBME,GAAW,WACfZ,QAAQC,IAAI,UACZoJ,EAAS,MACTzC,GAAY,MACZ+C,aAAaE,QACbP,GAAOQ,cAET9B,EAAWpH,IACPjB,EAAMoK,iBACR/J,QAAQC,IAAI,6BACZW,MAEF,IAAMoJ,GAAc,SAACjK,GAEnB,GADAC,QAAQC,IAAI,QAASF,GACjBA,EAAMkK,cAAc9H,OAAS,EAC/B+G,EAAgBnJ,EAAMkK,cAAc,GAAGC,SACvC9B,YAAW,WACTc,EAAgB,QACf,UAEA,GAAInJ,EAAMoK,aAAc,CAC3B,IAAMC,EAAarK,EAAMoK,aAAa7E,OAAO+E,OACzCD,GAAcA,EAAWjI,OAAS,IACpC+G,EAAgBkB,EAAW,GAAGF,SAC9B9B,YAAW,WACTc,EAAgB,QACf,QAOHoB,GAA0BC,YAAYxC,EAAmB,CAC7DyC,QAASR,GACTS,OAAQ,SAACC,EAAOC,GACd,IAAMC,EAAeD,EAAStK,KAAKwK,gBAO7BC,EANYJ,EAAMK,UAAU,CAChCC,MAAOtD,EACPuD,UAAW,CACTC,QAAS3K,KAGmBe,UAChCkI,IAAc,GACdxJ,QAAQC,IAAI,2BAA4B6K,EAAY3I,OAAQyI,EAAazI,QACrEyI,EAAazI,SAAW2I,EAAY3I,OACtCqH,IAAc,GAGdoB,EAAa/I,SAAQ,SAAAsJ,GACnB,IAAIC,GAAa,EACjBN,EAAYjJ,SAAQ,SAAAwJ,GAClB,GAAIF,EAAYrK,MAAM4B,KAAO2I,EAAWvK,MAAM4B,IACzCyI,EAAY/K,KAAKsC,KAAO2I,EAAWjL,KAAKsC,IACxCyI,EAAY9J,aAAegK,EAAWhK,YACtC8J,EAAY3I,SAAW6I,EAAW7I,OAGrC,OAFA4I,GAAa,OACbpL,QAAQC,IAAI,kBAIXmL,IACHpL,QAAQC,IAAI,4BACZuJ,IAAc,OAIpBxJ,QAAQC,IAAI,0BAA2B6K,EAAaF,MAIlDU,GAAmBf,YAAY1C,EAAW,CAC9C2C,QAASR,GACTS,OAAQ,SAACC,EAAOC,GACd,IAAIY,EAAcb,EAAMK,UAAU,CAChCC,MAAOvD,IAEH+D,EAAab,EAAStK,KAAKoL,SAC3B7J,EAAO2J,EAAY3F,UAAU7C,QAAO,SAAAjC,GAAK,OAAIA,EAAM4B,KAAO8I,EAAW9I,MAAIgJ,OAAOF,GACtFlC,GAAOqC,WAAW,CAChBX,MAAOvD,EACPpH,KAAM,CAAEuF,UAAWhE,QAInBgK,GAAsBrB,YAAYzC,EAAc,CACpD0C,QAASR,GACTS,OAAQ,SAACC,EAAOC,GACd,IAAIY,EAAcb,EAAMK,UAAU,CAChCC,MAAOvD,IAEHoE,EAAelB,EAAStK,KAAKqF,YACnC1F,QAAQC,IAAI,gBAAiB4L,EAAc,gBAAiBN,EAAY3F,WACxE,IAAMhE,EAAO2J,EAAY3F,UAAU7C,QAAO,SAAAjC,GAAK,OAAIA,EAAM4B,KAAOmJ,EAAanJ,MAC7E1C,QAAQC,IAAI,oBAAqB2B,GACjC0H,GAAOqC,WAAW,CAChBX,MAAOvD,EACPpH,KAAM,CAAEuF,UAAWhE,QAInBkK,GAAgBvB,YAAYjD,EAAO,CACvCkD,QAASR,KAsBL+B,GAAkB,SAACb,EAASc,EAAQ3K,EAAYmB,GACpDxC,QAAQC,IAAI,oDAAqDiL,EAASc,EAAQ3K,EAAYmB,GAC9F,IAAMyJ,EAAgB3C,GAAOyB,UAAU,CACrCC,MAAOtD,EACPuD,UAAW,CACTC,QAASA,KAGblL,QAAQC,IAAI,iBAAkBgM,EAAc3K,WAC5C,IAAMM,EAAOqK,EAAc3K,UAAUyB,QAAO,SAAAC,GAAK,OAC/CA,EAAM5C,KAAKsC,KAAOsJ,GAAUhJ,EAAM3B,aAAeA,KAEnD,GADArB,QAAQC,IAAI,wBAAyB2B,EAAKO,OAAS,GAAIP,GACnDA,EAAKO,OAAS,EAAG,CACnB,IAAM9B,EAAOuB,EAAK,GAClB5B,QAAQC,IAAI,YAAagM,EAAc3K,UACpCyB,QAAO,SAAAC,GAAK,OAAIA,EAAMN,KAAOrC,EAAKqC,MAClCgJ,OAFsB,eAGlBrL,EAHkB,CAIrBmC,aAEJ8G,GAAOqC,WAAW,CAChBX,MAAOtD,EACPuD,UAAW,CACTC,QAASA,GAEX7K,KAAM,CACJiB,UAAW2K,EAAc3K,UACtByB,QAAO,SAAAC,GAAK,OAAIA,EAAMN,KAAOrC,EAAKqC,MAClCgJ,OAFQ,eAGJrL,EAHI,CAIPmC,mBAIH,CACL,IAAM0J,EAAW,CACfpL,MAAO,CAAE4B,GAAIwI,EAASiB,WAAY,SAClC/L,KAAM,CAAEsC,GAAIsJ,EAAQG,WAAY,QAChC9K,aACAmB,SACAE,GA7LG0J,IAAOC,YAAY,IAAIC,SAAS,OA8LnCH,WAAY,SAEdnM,QAAQC,IAAI,gBAAiBiM,GAC7B5C,GAAOqC,WAAW,CAChBX,MAAOtD,EACPuD,UAAW,CACTC,QAASA,GAEX7K,KAAM,CACJiB,UAAW2K,EAAc3K,UACtBoK,OAAOQ,MAIhB1C,IAAc,IAGV+C,GAA2B,SAACrB,GAChC,IAAMe,EAAgB3C,GAAOyB,UAAU,CACrCC,MAAOtD,EACPuD,UAAW,CACTC,QAASA,KAGb,GAAuC,IAAnCe,EAAc3K,UAAUa,OAA5B,CAGAnC,QAAQC,IAAI,iBAAkBgM,EAAc3K,WAC5C,IAAMG,EAAgBwK,EAAc3K,UACjCU,KAAI,SAAAgB,GAAK,OAAIA,EAAM3B,cACnBsB,MAAK,SAAC6J,EAAIC,GAAL,OAAYA,EAAKD,KAAI,GAC7BxM,QAAQC,IAAI,gBAAiBwB,GAC7B6H,GAAOqC,WAAW,CAChBX,MAAOtD,EACPuD,UAAW,CACTC,QAASA,GAEX7K,KAAM,CACJiB,UAAW2K,EAAc3K,UAAUyB,QAAO,SAAAC,GAAK,OAAIA,EAAM3B,aAAeI,QAG5E+H,IAAc,GACVnI,GAAcI,GAChB0H,EAAc1H,EAAgB,KAqD5BgD,GAAoBiI,YAASlF,GAC7B7C,GAAgB+H,YAAS/E,EAAW,CACxCgF,MAAM,IAEF5L,GAAiB2L,YAAShF,EAAY,CAC1CiF,MAAOpM,EACP0K,UAAW,CACTC,QAAS3K,KAIPqM,GAAiBF,YAASjF,EAAY,CAC1CkF,MAAM,IAuDF9M,GAAU6M,YAAS9E,GAEzB,OACE,kBAACiF,EAAA,EAAD,KACGzD,GAAS,kBAAC,EAAD,CAAYxJ,MAAM,EAC1BgB,SAAUA,GACVV,QAASA,GACTL,QAASA,GACTU,eAAgBA,IAEjB0I,GAAgB,8CAEfG,GACA,kBAAC,EAAD,CACEnC,QA5WQ,SAAOvG,EAAUmG,GAAjB,mBAAAE,EAAAC,OAAA,kEAAAD,EAAA,MACS+E,GAAc,CACnCb,UAAW,CACTvK,WACAmG,eAJU,OACR8D,EADQ,OAORvB,EAAQuB,EAAStK,KAAKyM,MAAM1D,MAC5B2D,EAAYpC,EAAStK,KAAKyM,MAAMpM,SACtCV,QAAQC,IAAI,2BAA4BmJ,EAAO2D,GAC3C3D,IAEFC,EAASD,GACTxC,GAAYlG,GACZiJ,aAAaqD,QAAQ,WAAYD,GACjCpD,aAAaqD,QAAQ,QAAS5D,GAC9BlJ,GAAQ,QACRoJ,GAAOQ,cAjBK,sCA6WRlK,MAAM,EACNoK,YAAaA,KAEhBZ,IAAU7I,GAAkB,kBAAC,EAAD,CAC3BkE,kBAAmBA,GACnBE,cAAeA,GACfG,oBA1EsB,SAACtB,GAAD,OAC1B,WACExD,QAAQC,IAAI,mBAAoBuD,GAE9BwF,EADExF,IAAaoB,EACI,KAEApB,KAqEnBuB,gBAlEkB,SAAC3E,GAAD,OACtB,WACEJ,QAAQC,IAAI,eAAgBG,GACxByE,EAAeoI,SAAS7M,GAC1B2I,EAAkBlE,EAAe9B,QAAO,SAAAY,GAAM,OAAIA,IAAWvD,MAE7D2I,EAAkBlE,EAAe6G,OAAOtL,MA6DxCwE,gBAAiBA,EACjBC,eAAgBA,EAChBM,cAjDgB,0BAAA4B,EAAAC,OAAA,uDACpBhH,QAAQC,IAAI,kBAAmB2E,EAAgBlC,GAAImC,EAAe7C,KAAI,SAAA5B,GAAI,OAAIA,EAAKsC,OAD/D,WAAAqE,EAAA,MAEGuE,GACrB,CACEL,UAAW,CACTiC,QAASrI,EAAe7C,KAAI,SAAA5B,GAAI,OAAIA,EAAKsC,MACzCyK,WAAYvI,EAAgBlC,OANd,OAEdiI,EAFc,OAUpB3K,QAAQC,IAAI,WAAY0K,GAGxB7B,EAAgB6B,EAAStK,KAAKoL,UAC9B7C,EAAkB+B,EAAStK,KAAKoL,SAAS/I,IAdrB,sCAkDhB9C,KAAe,UAATO,KAEPiJ,GAAS,kBAAC,EAAD,CACR3E,kBAAmBmI,GACnBpH,SAvGc,SAAC1E,GACnBd,QAAQC,IAAI,QAASa,GACrBgI,EAAgBhI,GAChB8H,EAAkB9H,EAAM4B,IACxByG,GAAe,IAoGXzD,YAlEc,SAAO5E,GAAP,eAAAiG,EAAAC,OAAA,uDAClBhH,QAAQC,IAAI,sBAAuBa,EAAM4B,IADvB,WAAAqE,EAAA,MAEK6E,GACrB,CACEX,UAAW,CACTC,QAASpK,EAAM4B,OALH,OAEZiI,EAFY,OASlB3K,QAAQC,IAAI,WAAY0K,GATN,sCAmEd/K,KAAe,SAATO,KAEPiJ,GAAS7I,GAAkB,kBAAC,EAAD,CAC1BQ,eAAgBA,GAChBD,MAAO+H,EACPzG,YArQqB,WACzB,IAMMd,EANgBgI,GAAOyB,UAAU,CACrCC,MAAOtD,EACPuD,UAAW,CACTC,QAAS3K,KAGmBe,UAChCtB,QAAQC,IAAI,aAAcqB,GAC1B,IAAI8L,GAAO,EACX9L,EAAUO,SAAQ,SAAAmB,GACZA,EAAM3B,WAAa+L,IACrBA,EAAMpK,EAAM3B,eAGhBwH,EAAazH,MAAMS,SAAQ,SAAA8B,GACzBoI,GAAgBxL,EAAgBoD,EAAOjB,GAAI0K,EAAM,EAAG,OAsPlD3K,YAvHc,SAAOD,EAAQwJ,GAAf,SAAAjF,EAAAC,OAAA,gDAClBhH,QAAQC,IAAI,mCAAoCuC,EAAQ,aAAcnB,EAAY2K,EAAQzL,GAC1FwL,GAAgBxL,EAAgByL,EAAQ3K,EAAYmB,GAFlC,sCAwHd2B,gBA5HkB,oBAAA4C,EAAAC,OAAA,gDACtBhH,QAAQC,IAAI,qBACZsM,GAAyBhM,GAFH,sCA6HlB2B,YApHc,SAACI,GACnB6G,EAAc7G,IAoHVjB,WAAYA,EACZ+C,YAlDc,WAClBpE,QAAQC,IAAI,gBACZ6I,EAAgB,MAChBF,EAAkB,MAClBG,EAAkB,IAClBC,EAAmB,MACnB9I,GAAQ,SA6CJoE,aA/JgC,8BAAAyC,EAAAC,OAAA,mDAOG,KANjCiF,EAAgB3C,GAAOyB,UAAU,CACrCC,MAAOtD,EACPuD,UAAW,CACTC,QAAS3K,MAGKe,UAAUa,OAPQ,wDAU9Bb,EAAY2K,EAAc3K,UAChCtB,QAAQC,IAAI,qCAAsCqB,GAXd,oBAAAyF,EAAA,MAa5B2C,IAAwB,IAbI,0BAAA3C,EAAA,MAcbuD,GAAwB,CAC3CW,UAAW,CACTC,QAAS3K,EACT8M,SAAU/L,EAAUU,KAAI,SAAAgB,GAAK,OAAIA,EAAMN,GAAG4J,cAC1CY,QAAS5L,EAAUU,KAAI,SAAAgB,GAAK,OAAIA,EAAM5C,KAAKsC,GAAG4J,cAC9CgB,aAAchM,EAAUU,KAAI,SAAAgB,GAAK,OAAIA,EAAM3B,cAC3CmB,OAAQlB,EAAUU,KAAI,SAAAgB,GAAK,OAAIA,EAAMR,cApBP,QAc9BmI,EAd8B,OAuBlCjB,IAAwB,GACxB1J,QAAQC,IAAI,WAAY0K,GACxB3K,QAAQC,IAAI,+BAAgCe,IAzBV,kDA2BlCgJ,GAAY,EAAD,IA3BuB,0DAgKhCpK,KAAe,UAATO,GACNa,WAAYA,GACZC,gBAAiBwI,KAEnB,6BACE,6BACA,kG,oECpbF8D,GAAS9E,OAAOjF,SAASgK,OAAOC,QAAQ,QAAS,MACnDC,GAAK,UAAMH,GAAN,YASTvN,QAAQC,IAAI,gBAAiByN,IAC7B1N,QAAQC,IAAI,WATE,YAWd,IAAM0N,GAAS,IAAIC,IAAc,CAC/BC,IAAKH,GACLI,QAAS,CAAEC,WAAW,KAGlBC,GAAWC,YAAe,CAC9BJ,IAjBY,aAoBRK,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BjF,EAAQO,aAAaC,QAAQ,SACnC,MAAO,CACLyE,QAAQ,eACHA,EADE,CAELC,cAAelF,EAAK,iBAAaA,GAAU,WAK3CmF,GAAOC,aACX,YAAgB,IAAbxD,EAAY,EAAZA,MAAY,EACeyD,YAAkBzD,GAAtC0D,EADK,EACLA,KAAMC,EADD,EACCA,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,IAE3ChB,GACAO,GAASxC,OAAOsC,KAGZ1E,GAAS,IAAIsF,IAAa,CAC9BL,QACAM,MAAO,IAAIC,MAGbC,IAASC,OACP,kBAAC,IAAD,CAAgB1F,OAAQA,IACtB,kBAAC,IAAD,CAAqBA,OAAQA,IAC3B,kBAAC,EAAD,QAGJ2F,SAASC,eAAe,W","file":"static/js/main.8ce2a039.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navigation = (props) => {\n  if (!props.show) {\n    return null\n  }\n\n  if (props.meQuery.loading) {\n    return <div>loading...</div>\n  }\n  if (props.meQuery.error) {\n    console.log('error', props.meQuery.error)\n    return <div>error...</div>\n  }\n\n  const setPage = (page) => {\n    props.setPage(page)\n  }\n  const doLogout = () => {\n    props.doLogout()\n  }\n  const user = props.meQuery.data.me\n  const currentRoundId = props.currentRoundId\n  return (\n    <div className=\"ui secondary menu\">\n      <div className=\"item\" onClick={() => { setPage('main'); console.log('main') }}>main</div>\n      {currentRoundId ?\n        <div className=\"item\" onClick={() => { setPage('round'); console.log('continue round') }}>continue round</div>\n        : <div className=\"item\" onClick={() => { setPage('round'); console.log('new round') }}>new round</div>\n      }\n      <div className=\"item\">{user.username} {user.admin ? '(admin) ' : ''}logged in</div>\n      <div className=\"item\" onClick={() => { setPage(null); doLogout() }}>logout</div>\n\n    </div>\n  )\n}\n\nexport default Navigation\n\n","import React from 'react';\n\nconst maxValue = (arr, def = -1) => {\n  let temp = def\n  arr.forEach(element => {\n    if (temp < element) {\n      temp = element\n    }\n  });\n  return temp\n}\n\nconst Round = (props) => {\n  if (!props.show) {\n    return null\n  }\n  //console.log('round', props.round)\n  if (!props.round) {\n    console.log('no round chosen')\n    return null\n  }\n  if (props.allPointsQuery.loading) {\n    console.log('loading')\n    return <div>loading...</div>\n  }\n  if (props.allPointsQuery.error) {\n    console.log('error', props.allPointsQuery.error)\n    return <div>error...</div>\n  }\n  //console.log('saved state and uploading points state', props.savedState, props.uploadingPoints)\n  const savedState = props.savedState\n  const uploadingPoints = props.uploadingPoints\n  const buttonDisabled = savedState || uploadingPoints\n  const players = props.round.users\n  const trackIndex = props.trackIndex\n  const allPoints = props.allPointsQuery.data.allPoints\n  const round = props.round\n  let order = players.slice()\n  console.log('all points', allPoints)\n  //console.log('players ', props.round.users)\n\n  const maxTrackIndex = maxValue(allPoints.map(play => play.trackIndex), -1)\n  if (trackIndex === -1 && maxTrackIndex > -1) {\n    props.changeTrack(maxTrackIndex)\n    return null\n  }\n  if (allPoints.length === 0) {\n    console.log('new round', props.round)\n    props.addNewTrack()\n    props.changeTrack(0)\n  }\n  const handleDeleteLastTrackClick = () => {\n    props.deleteLastTrack()\n  }\n  const handleRoundFinishClick = () => {\n    props.finishRound()\n  }\n  const handleUploadPointsClick = () => {\n    props.uploadPoints()\n  }\n  const handleTrackIndexChangeClick = (index) =>\n    () => {\n      console.log('new index', index, 'max index', maxTrackIndex)\n      if (maxTrackIndex + 1 === index) {\n        console.log('add new track')\n        props.addNewTrack()\n      }\n      props.changeTrack(index)\n    }\n  const handlePointChangeClick = (points, user) =>\n    () => {\n      if (points > -1) {\n        props.updatePoint(points, user.id)\n      }\n    }\n  order.sort((u1, u2) => {\n    for (let i = trackIndex; i >= 0; i--) {\n      const temp = allPoints.filter(point => point.trackIndex === i)\n      const u1pointArray = temp.filter(point => point.user.id === u1.id)\n      const u2pointArray = temp.filter(point => point.user.id === u2.id)\n      if (u1pointArray.length === 0 || u2pointArray.length === 0) {\n        return 0\n      }\n      const u1p = u1pointArray[0].points\n      const u2p = u2pointArray[0].points\n      if (u1p > u2p) {\n        return 1\n      } else if (u1p < u2p) {\n        return -1\n      }\n    }\n    return 0\n  })\n  //console.log('order', order)\n  const orderOf = (player) => {\n    for (let i = 0; i < order.length; i++) {\n      if (player === order[i]) {\n        return i + 1 + '.'\n      }\n    }\n    return 'err'\n  }\n\n\n  const trackNumbers = []\n  console.log('max track index', maxTrackIndex, 'track index', trackIndex)\n  for (let i = 0; i < maxTrackIndex + 1; i++) {\n    trackNumbers.push(<th key={i}>{i + 1}</th>)\n  }\n  console.log('track numbers th', trackNumbers, 'all points', allPoints)\n  return (\n    <div className=\"App\">\n      {savedState && <div>saved state</div>}\n      {!savedState && <div><strong>unsaved state</strong></div>}\n      <div>\n        <h3>{round.location.name}</h3>\n        <h3>\n          <div className=\"row\">\n            <button text='-' onClick={handleTrackIndexChangeClick(trackIndex - 1)}>-</button>\n            Track {trackIndex + 1}\n            <button text='+' onClick={handleTrackIndexChangeClick(trackIndex + 1)}>+</button>\n          </div>\n        </h3>\n        <table className=\"ui celled table\">\n          <thead>\n            <tr>\n              <th>order</th><th>player</th>\n              {\n                trackNumbers\n              }\n              <th>total</th>\n            </tr>\n          </thead>\n          <tbody>\n\n            {players.map(player => {\n              const playerPlays = allPoints.filter(point => point.user.id === player.id)\n              if (playerPlays) {\n                playerPlays.sort((p1, p2) => p1.trackIndex - p2.trackIndex)\n                const total = playerPlays.length === 0 ?\n                  0 : playerPlays.map(play => play.points).reduce((tot, point) => tot + point)\n                return (\n                  < tr key={player.id} >\n                    <td key='order'>{orderOf(player)}</td>\n                    <td key={player.username}>{player.username}</td>\n                    {\n                      playerPlays.map(play => {\n                        if (play.trackIndex === trackIndex) {\n                          return (<td key={play.trackIndex + player.id}>\n                            <strong>\n                              <button className=\"ui button\" onClick={handlePointChangeClick(play.points - 1, play.user)}>-</button>\n                              {play.points}\n                              <button className=\"ui button\" onClick={handlePointChangeClick(play.points + 1, play.user)}>+</button>\n                            </strong>\n                          </td>)\n                        } else {\n                          return (<td key={play.trackIndex + player.id}>{play.points}</td>)\n                        }\n                      })\n                    }\n                    <td>{total}</td>\n                  </tr>\n                )\n              } else return (\n                <tr><td>no plays</td></tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n      <br />\n      <div className=\"row\">\n        <button className=\"ui button\" text='delete last track' onClick={handleDeleteLastTrackClick}>delete last track</button>\n        <button className=\"ui button\" text='finish round' onClick={handleRoundFinishClick}>finnish round</button>\n        <button className=\"ui button\" disabled={buttonDisabled} onClick={handleUploadPointsClick}>upload points</button>\n      </div>\n      {false && <div>round is finnished</div>}\n    </div>\n  )\n}\n\nexport default Round","import React from 'react'\n\nconst AddRound = (props) => {\n  if (!props.show) {\n    return null\n  }\n  const allLocations = props.allLocationsQuery.data.allLocations\n  const allUsers = props.allUsersQuery.data.allUsers\n  const currentLocation = props.currentLocation\n  const currentPlayers = props.currentPlayers\n\n  const startNewRound = (event) => {\n    console.log('start new round with', currentLocation, currentPlayers)\n    event.preventDefault()\n    props.startNewRound()\n  }\n\n  if (props.allLocationsQuery.loading || props.allUsersQuery.loading) {\n    console.log('loading')\n    return <div>loading...</div>\n  }\n  if (props.allLocationsQuery.error || props.allUsersQuery.error) {\n    console.log('errors', props.allUsersQuery.error, props.allLocationsQuery.error)\n    return <div>error...</div>\n  }\n  if (!currentLocation) {\n    // select location\n    return (\n      <div>\n        <h3>Select location</h3>\n        <div>\n          <table className=\"ui celled table\">\n            <thead>\n              <tr key='header'>\n                <th>locations</th>\n              </tr>\n            </thead>\n            <tbody>\n              {allLocations.map(location =>\n                <tr key={location.id}>\n                  <td className='ui button' onClick={props.handleLocationClick(location)}>{location.name}</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <h3>New round</h3>\n      <div onClick={props.handleLocationClick(currentLocation)}>\n        {currentLocation.name}\n      </div>\n      <div>\n        <table className=\"ui celled table\">\n          <thead>\n            <tr key='header'>\n              <th>selected players</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              {currentPlayers.map(user =>\n                <td className='ui button' key={user.id} onClick={props.handleUserClick(user)}>{user.username}</td>\n              )}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      {\n        currentPlayers.length > 0 && currentLocation &&\n        <div>\n          <form onSubmit={startNewRound}>\n            <button className=\"ui button\" type='submit'>start</button>\n          </form>\n        </div>\n      }\n      <div>\n        <table className=\"ui celled table\">\n          <thead>\n            <tr>\n              <th>all players</th>\n            </tr>\n          </thead>\n          <tbody>\n            {allUsers.map(user =>\n              <tr key={user.id}>\n                <td className='ui button' onClick={props.handleUserClick(user)}>{user.username}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n\n    </div>\n  )\n}\n\nexport default AddRound","import React from 'react'\n\nconst Rounds = (props) => {\n  if (!props.show) {\n    return null\n  }\n  if (props.result.loading) {\n    return <div>loading...</div>\n  }\n  if (props.result.error) {\n    console.log('error', props.result.error)\n    return <div>error...</div>\n  }\n  const handleRoundClick = (round) =>\n    () => {\n      console.log('round clicked', round)\n      props.setRound(round)\n    }\n  const handleDeleteRoundClick = (round) =>\n    () => {\n      console.log('delete round clicked', round)\n      props.deleteRound(round)\n    }\n  const rounds = props.result.data.allRounds\n  rounds.sort((r1, r2) => r2.date - r1.date)\n  if (!rounds) {\n    return null\n  }\n  return (\n    <div>\n      <table className=\"ui celled table\">\n        <thead>\n          <tr key='header'>\n            <th>location</th><th>date</th><th colSpan=\"99\">players</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rounds.map(round => {\n            const d = new Date(round.date)\n            const dateString = d.getDate() + '.' + (d.getMonth() + 1) + '.' + d.getFullYear() + ' ' + d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds()\n            return (\n              <tr key={round.id}>\n                <td onClick={handleRoundClick(round)}>{round.location.name}</td><td>{dateString}</td>\n                {round.users.map(user =>\n                  <td key={user.username}>{user.username}</td>\n                )}\n                <td><button onClick={handleDeleteRoundClick(round)}>delete</button></td>\n              </tr>\n            )\n          }\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Rounds","import React, { useState } from 'react'\n\nconst LoginForm = (props) => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  if (!props.show) {\n    return null\n  }\n  const login = async (event) => {\n    event.preventDefault()\n    props.doLogin(username, password)\n  }\n  const onPasswordChange = (event) => {\n    setPassword(event.target.value)\n  }\n  const onUsernameChange = (event) => {\n    setUsername(event.target.value)\n  }\n  return (\n    <div className='login'>\n      <h2>Login to application</h2>\n      <form onSubmit={login} className=\"ui form\">\n        <div className=\"field\">\n          <label>Username</label>\n          <input id='username'\n            type=\"text\"\n            placeholder=\"username\"\n            value={username}\n            onChange={onUsernameChange} />\n        </div>\n        <div className=\"field\">\n          <label>Password</label>\n          <input id='password'\n            type=\"password\"\n            placeholder=\"password\"\n            value={password}\n            onChange={onPasswordChange} />\n        </div>\n        <button className=\"ui button\" type=\"submit\">\n          login\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm","import gql from \"graphql-tag\";\nexport const LOGIN = gql`\nmutation login($username: String!, $password: String! ){\n  login(username: $username, password: $password){\n    token\n    username\n  }\n  \n}\n`\nexport const ALL_FRIENDS = gql`\n{\n  me {\n    username\n    id\n    friends{username, id}\n  }\n}\n`\nexport const ALL_LOCATIONS = gql`\n{\n  allLocations {\n    name\n    id\n  }\n}  \n`\nexport const ALL_ROUNDS = gql`\n{\n  allRounds {\n    users{username, id}\n    location{name, id}\n    date\n    id\n  }\n}\n`\nexport const ALL_POINTS = gql`\n  query ($roundId: ID!) {\n    allPoints(\n      roundId: $roundId\n    ){\n    trackIndex,\n    user{id},\n    round{id},\n    points,\n    id\n    }\n  }\n`\nexport const ALL_USERS = gql`\nquery {\n  allUsers{\n    username,\n    id\n  }\n}\n`\nexport const ME = gql`\nquery{\n  me{\n    admin\n    username\n    id\n  }\n}\n`\nexport const ADD_LOCATION = gql`\n  mutation createLocation($name: String!){\n    addLocation(\n      name: $name\n    ){\n      id, name\n    }\n  }\n`\nexport const ADD_ROUND = gql`\n  mutation createRound($locationId: ID!, $userIds: [ID!]!){\n    addRound(\n      locationId: $locationId\n      userIds: $userIds\n    ){\n      location{\n        name\n        id\n      }\n      users{\n        username\n        id\n      }\n      date\n      id\n    }\n  }\n`\nexport const DELETE_ROUND = gql`\n  mutation removeRound($roundId: ID!){\n    deleteRound(\n      roundId: $roundId\n    ){\n      id\n    }\n  }\n`\nexport const ADD_PLAY = gql`\n  mutation createPlay($roundId: ID!, $playNumber:Int!){\n    addPlay(\n      roundId: $roundId,\n      playNumber: $playNumber\n    ){\n      id\n    }\n  }\n`\n\nexport const ADD_CACHED_POINTS = gql`\n  mutation addCachedPoints($roundId: ID!, $pointIds: [ID!]!, $userIds: [ID!]!, $trackIndexes:[Int!]!, $points: [Int!]!){\n    addCachedPoints(\n      roundId: $roundId,\n      pointIds: $pointIds,\n      userIds: $userIds,\n      trackIndexes: $trackIndexes,\n      points: $points\n    ){\n      trackIndex,\n      user{id},\n      round{id},\n      points,\n      id\n    }\n  }\n`\n","import React, { useState, useEffect } from \"react\";\n\nfunction useTimeout(doLogout) {\n  const signoutTime = 1000 * 60 * 60\n  let logoutTimeout;\n\n  const warn = () => {\n    console.log('Warning');\n  };\n  const logout = () => {\n    console.log('You have been loged out');\n    doLogout()\n  }\n\n  const setTimeouts = () => {\n    //    warnTimeout = setTimeout(warn, warningTime);\n    logoutTimeout = setTimeout(logout, signoutTime);\n  };\n\n  const clearTimeouts = () => {\n    //  if (warnTimeout) clearTimeout(warnTimeout);\n    if (logoutTimeout) clearTimeout(logoutTimeout);\n  };\n\n  useEffect(() => {\n    const events = [\n      'load',\n      'mousedown',\n      'click',\n      'scroll',\n      'keypress'\n    ];\n\n    const resetTimeout = () => {\n      clearTimeouts();\n      setTimeouts();\n    };\n\n    for (let i in events) {\n      window.addEventListener(events[i], resetTimeout);\n    }\n\n    setTimeouts();/*\n    return () => {\n      console.log('loop called')\n      for (let i in events) {\n        window.removeEventListener(events[i], resetTimeout);\n        clearTimeouts();\n      }\n    }*/\n  }, []);\n}\n\nexport default useTimeout","import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useApolloClient } from '@apollo/react-hooks'\nimport { Container, Menu, Router } from 'semantic-ui-react'\nimport Navigation from './components/Navigation'\nimport Round from './components/Round'\nimport AddRound from './components/AddRound'\nimport Rounds from './components/Rounds'\nimport LoginForm from './components/LoginForm'\nimport crypto from 'crypto'\nimport {\n  ALL_FRIENDS,\n  ALL_LOCATIONS,\n  ALL_ROUNDS,\n  ALL_POINTS,\n  ALL_USERS,\n  LOGIN,\n  ADD_LOCATION,\n  ADD_ROUND,\n  DELETE_ROUND,\n  ADD_CACHED_POINTS,\n  ME,\n} from './querys'\nimport useTimeout from './useTimeout'\n\nconst App = (props) => {\n  const [currentRoundId, setCurrentRoundId] = useState(null)\n  const [currentRound, setCurrentRound] = useState(null)\n  const [currentPlayers, setCurrentPlayers] = useState([])\n  const [currentLocation, setCurrentLocation] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [trackIndex, setTrackIndex] = useState(0)\n  const [token, setToken] = useState(null)\n  const [username, setUsername] = useState(null)\n  const [page, setPage] = useState(\"main\")\n  const client = useApolloClient()\n  const [savedState, setSavedState] = useState(true)\n  const [uploadingPointsState, setUploadingPointsState] = useState(false)\n\n  useEffect(() => {\n    const username = localStorage.getItem('username')\n    const token = localStorage.getItem('token')\n    console.log('restore logged user', username, token)\n    setToken(token)\n    setUsername(username)\n  }, [])\n\n  const getRandomId = () => {\n    return crypto.randomBytes(16).toString(\"hex\")\n  }\n\n  const doLogin = async (username, password) => {\n    const response = await loginMutation({\n      variables: {\n        username,\n        password\n      }\n    })\n    const token = response.data.login.token\n    const tusername = response.data.login.username\n    console.log('login token and username', token, tusername)\n    if (token) {\n      //localStorage.setItem('token', token)\n      setToken(token)\n      setUsername(username)\n      localStorage.setItem('username', tusername)\n      localStorage.setItem('token', token)\n      setPage('main')\n      client.resetStore()\n    }\n  }\n\n  const doLogout = () => {\n    console.log('logout')\n    setToken(null)\n    setUsername(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n  useTimeout(doLogout)\n  if (props.sessionTimeout) {\n    console.log('session time out received')\n    doLogout()\n  }\n  const handleError = (error) => {\n    console.log('error', error)\n    if (error.graphQLErrors.length > 0) {\n      setErrorMessage(error.graphQLErrors[0].message)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 10000)\n    }\n    else if (error.networkError) {\n      const errorArray = error.networkError.result.errors\n      if (errorArray && errorArray.length > 0) {\n        setErrorMessage(errorArray[0].message)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 10000)\n      }\n    }\n  }\n\n\n  // uploads cached points to server\n  const addCachedPointsMutation = useMutation(ADD_CACHED_POINTS, {\n    onError: handleError,\n    update: (store, response) => {\n      const serverPoints = response.data.addCachedPoints\n      let dataInStore = store.readQuery({\n        query: ALL_POINTS,\n        variables: {\n          roundId: currentRoundId\n        },\n      })\n      const localPoints = dataInStore.allPoints\n      setSavedState(true)\n      console.log('local and server lengths', localPoints.length, serverPoints.length)\n      if (serverPoints.length !== localPoints.length) {\n        setSavedState(false)\n\n      } else {\n        serverPoints.forEach(serverPoint => {\n          let foundMatch = false\n          localPoints.forEach(localPoint => {\n            if (serverPoint.round.id === localPoint.round.id\n              && serverPoint.user.id === localPoint.user.id\n              && serverPoint.trackIndex === localPoint.trackIndex\n              && serverPoint.points === localPoint.points) {\n              foundMatch = true\n              console.log('found match')\n              return\n            }\n          })\n          if (!foundMatch) {\n            console.log('set saved state to false')\n            setSavedState(false)\n          }\n        });\n      }\n      console.log('local and server points', localPoints, serverPoints)\n    }\n  })\n\n  const addRoundMutation = useMutation(ADD_ROUND, {\n    onError: handleError,\n    update: (store, response) => {\n      let dataInStore = store.readQuery({\n        query: ALL_ROUNDS\n      })\n      const addedRound = response.data.addRound\n      const temp = dataInStore.allRounds.filter(round => round.id !== addedRound.id).concat(addedRound)\n      client.writeQuery({\n        query: ALL_ROUNDS,\n        data: { allRounds: temp }\n      })\n    }\n  })\n  const deleteRoundMutation = useMutation(DELETE_ROUND, {\n    onError: handleError,\n    update: (store, response) => {\n      let dataInStore = store.readQuery({\n        query: ALL_ROUNDS\n      })\n      const deletedRound = response.data.deleteRound\n      console.log('deleted round', deletedRound, 'rounds before', dataInStore.allRounds)\n      const temp = dataInStore.allRounds.filter(round => round.id !== deletedRound.id)\n      console.log('new data in store', temp)\n      client.writeQuery({\n        query: ALL_ROUNDS,\n        data: { allRounds: temp }\n      })\n    }\n  })\n  const loginMutation = useMutation(LOGIN, {\n    onError: handleError\n  })\n  const addNewTrackToCache = () => {\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: currentRoundId\n      }\n    })\n    const allPoints = originalState.allPoints\n    console.log('all points', allPoints)\n    let max = -1\n    allPoints.forEach(point => {\n      if (point.trackIndex > max) {\n        max = point.trackIndex\n      }\n    })\n    currentRound.users.forEach(player => {\n      addPointToCache(currentRoundId, player.id, max + 1, 3)\n    })\n    //TODO: get max track index and add new track\n  }\n  const addPointToCache = (roundId, userId, trackIndex, points) => {\n    console.log('add point with roundId userId, trackindex, points', roundId, userId, trackIndex, points)\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      }\n    })\n    console.log('original state', originalState.allPoints)\n    const temp = originalState.allPoints.filter(point =>\n      point.user.id === userId && point.trackIndex === trackIndex)\n    console.log('found data from cache', temp.length > 0 ? temp : false)\n    if (temp.length > 0) {\n      const data = temp[0]\n      console.log('new state', originalState.allPoints\n        .filter(point => point.id !== data.id)\n        .concat({\n          ...data,\n          points\n        }))\n      client.writeQuery({\n        query: ALL_POINTS,\n        variables: {\n          roundId: roundId\n        },\n        data: {\n          allPoints: originalState.allPoints\n            .filter(point => point.id !== data.id)\n            .concat({\n              ...data,\n              points\n            })\n        }\n      })\n    } else {\n      const newPoint = {\n        round: { id: roundId, __typename: \"Round\" },\n        user: { id: userId, __typename: \"User\" },\n        trackIndex,\n        points,\n        id: getRandomId(),\n        __typename: 'Point'\n      }\n      console.log('add new point', newPoint)\n      client.writeQuery({\n        query: ALL_POINTS,\n        variables: {\n          roundId: roundId\n        },\n        data: {\n          allPoints: originalState.allPoints\n            .concat(newPoint)\n        }\n      })\n    }\n    setSavedState(false)\n  }\n\n  const deleteLastTrackFromCache = (roundId) => {\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      }\n    })\n    if (originalState.allPoints.length === 0) {\n      return\n    }\n    console.log('original state', originalState.allPoints)\n    const maxTrackIndex = originalState.allPoints\n      .map(point => point.trackIndex)\n      .sort((i1, i2) => i2 - i1)[0]\n    console.log('maxTrackindex', maxTrackIndex)\n    client.writeQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      },\n      data: {\n        allPoints: originalState.allPoints.filter(point => point.trackIndex !== maxTrackIndex)\n      }\n    })\n    setSavedState(false)\n    if (trackIndex >= maxTrackIndex) {\n      setTrackIndex(maxTrackIndex - 1)\n    }\n  }\n\n  const uploadPointsFromCacheToServer = async () => {\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: currentRoundId\n      }\n    })\n    if (originalState.allPoints.length === 0) {\n      return\n    }\n    const allPoints = originalState.allPoints\n    console.log('upload points from cache to server', allPoints)\n    try {\n      await setUploadingPointsState(true)\n      let response = await addCachedPointsMutation({\n        variables: {\n          roundId: currentRoundId,\n          pointIds: allPoints.map(point => point.id.toString()),\n          userIds: allPoints.map(point => point.user.id.toString()),\n          trackIndexes: allPoints.map(point => point.trackIndex),\n          points: allPoints.map(point => point.points)\n        }\n      })\n      setUploadingPointsState(false)\n      console.log('response', response)\n      console.log('server and local state match', savedState)\n    } catch (error) {\n      handleError(error)\n    }\n  }\n\n  const deleteLastTrack = async () => {\n    console.log('delete last track')\n    deleteLastTrackFromCache(currentRoundId)\n  }\n  const updatePoint = async (points, userId) => {\n    console.log('add point with points and userId', points, 'trackIndex', trackIndex, userId, currentRoundId)\n    addPointToCache(currentRoundId, userId, trackIndex, points)\n  }\n\n  const changeTrack = (index) => {\n    setTrackIndex(index)\n  }\n  const setNewRound = (round) => {\n    console.log('round', round)\n    setCurrentRound(round)\n    setCurrentRoundId(round.id)\n    setTrackIndex(-1)\n  }\n  const allLocationsQuery = useQuery(ALL_LOCATIONS)\n  const allUsersQuery = useQuery(ALL_USERS, {\n    skip: false\n  })\n  const allPointsQuery = useQuery(ALL_POINTS, {\n    skip: !currentRoundId,\n    variables: {\n      roundId: currentRoundId\n    },\n  })\n\n  const allRoundsQuery = useQuery(ALL_ROUNDS, {\n    skip: false\n  })\n  const handleLocationClick = (location) =>\n    () => {\n      console.log('location clicked', location)\n      if (location === currentLocation) {\n        setCurrentLocation(null)\n      } else {\n        setCurrentLocation(location)\n      }\n    }\n  const handleUserClick = (user) =>\n    () => {\n      console.log('user clicked', user)\n      if (currentPlayers.includes(user)) {\n        setCurrentPlayers(currentPlayers.filter(player => player !== user))\n      } else {\n        setCurrentPlayers(currentPlayers.concat(user))\n      }\n    }\n  const deleteRound = async (round) => {\n    console.log('delte round with id', round.id)\n    const response = await deleteRoundMutation(\n      {\n        variables: {\n          roundId: round.id\n        }\n      }\n    )\n    console.log('response', response)\n  }\n  const startNewRound = async () => {\n    console.log('start new round', currentLocation.id, currentPlayers.map(user => user.id))\n    const response = await addRoundMutation(\n      {\n        variables: {\n          userIds: currentPlayers.map(user => user.id),\n          locationId: currentLocation.id\n        }\n      }\n    )\n    console.log('response', response)\n    //setCurrentLocation(null)\n    //setCurrentPlayers([])\n    setCurrentRound(response.data.addRound)\n    setCurrentRoundId(response.data.addRound.id)\n  }\n  const finishRound = () => {\n    console.log('finish round')\n    setCurrentRound(null)\n    setCurrentRoundId(null)\n    setCurrentPlayers([])\n    setCurrentLocation(null)\n    setPage('main')\n  }\n  const meQuery = useQuery(ME)\n\n  return (\n    <Container>\n      {token && <Navigation show={true}\n        doLogout={doLogout}\n        setPage={setPage}\n        meQuery={meQuery}\n        currentRoundId={currentRoundId} />\n      }\n      {errorMessage && <div>errorMessage</div>\n      }\n      {!token &&\n        <LoginForm\n          doLogin={doLogin}\n          show={true}\n          handleError={handleError} />\n      }\n      {token && !currentRoundId && <AddRound\n        allLocationsQuery={allLocationsQuery}\n        allUsersQuery={allUsersQuery}\n        handleLocationClick={handleLocationClick}\n        handleUserClick={handleUserClick}\n        currentLocation={currentLocation}\n        currentPlayers={currentPlayers}\n        startNewRound={startNewRound}\n        show={page === 'round'}\n      />}\n      {token && <Rounds\n        allLocationsQuery={allRoundsQuery}\n        setRound={setNewRound}\n        deleteRound={deleteRound}\n        show={page === 'main'}\n      />}\n      {token && currentRoundId && <Round\n        allPointsQuery={allPointsQuery}\n        round={currentRound}\n        addNewTrack={addNewTrackToCache}\n        updatePoint={updatePoint}\n        deleteLastTrack={deleteLastTrack}\n        changeTrack={changeTrack}\n        trackIndex={trackIndex}\n        finishRound={finishRound}\n        uploadPoints={uploadPointsFromCacheToServer}\n        show={page === 'round'}\n        savedState={savedState}\n        uploadingPoints={uploadingPointsState}\n      />}\n      <div>\n        <br />\n        <em>Frisbeegolf app, Fullstack course 2019 assignment, Juho Taipale</em>\n      </div>\n    </Container>\n  )\n\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ApolloProvider } from '@apollo/react-common'\nimport { ApolloProvider as ApolloHooksProvider } from '@apollo/react-hooks'\n\nimport { ApolloClient } from '@apollo/client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\nconst wshost = window.location.origin.replace(/^http/, 'ws')\nlet wsuri = `${wshost}/graphql`\nlet httpUri = '/graphql'\nif (process.env.NODE_ENV !== 'production') {\n  console.log('development or testing environment')\n  httpUri = 'http://localhost:4000/graphql'\n  wsuri = `ws://localhost:4000/graphql`\n  //httpUri = 'http://frisbeegolfappi.herokuapp.com/graphql'\n  //wsuri = `ws://frisbeegolfappi.herokuapp.com/graphql`\n}\nconsole.log('websocket uri', wsuri)\nconsole.log('http uri', httpUri)\n\nconst wsLink = new WebSocketLink({\n  uri: wsuri,\n  options: { reconnect: true }\n})\n\nconst httpLink = createHttpLink({\n  uri: httpUri,\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('token')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <App />\n    </ApolloHooksProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}
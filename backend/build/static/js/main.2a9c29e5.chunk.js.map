{"version":3,"sources":["components/Navigation.js","components/Round.js","components/AddLocation.js","components/AddRound.js","components/Rounds.js","components/LoginForm.js","querys.js","useTimeout.js","App.js","index.js"],"names":["Navigation","props","show","meQuery","loading","error","console","log","setPage","page","user","data","me","currentRoundId","className","onClick","username","admin","doLogout","Round","round","allPointsQuery","savedState","uploadingPoints","buttonDisabled","players","users","trackIndex","allPoints","order","slice","maxTrackIndex","arr","def","temp","forEach","element","maxValue","map","play","changeTrack","handleTrackIndexChangeClick","index","addNewTrack","handlePointChangeClick","points","updatePoint","id","sort","u1","u2","i","filter","point","u1pointArray","u2pointArray","length","u1p","u2p","trackNumbers","push","key","location","name","player","playerPlays","p1","p2","total","reduce","tot","orderOf","text","deleteLastTrack","finishRound","disabled","uploadPoints","AddLocation","useState","setLocation","value","onChange","target","addNewLocation","AddRound","allLocations","allLocationsQuery","allUsers","allUsersQuery","currentLocation","currentPlayers","handleLocationClick","handleUserClick","onSubmit","event","preventDefault","startNewRound","type","Rounds","allRoundsQuery","handleRoundClick","setRound","rounds","allRounds","r1","r2","date","d","Date","dateString","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","userFields","totals","toString","userField","join","window","confirm","deleteRound","LoginForm","setUsername","password","setPassword","login","a","doLogin","placeholder","LOGIN","gql","ALL_LOCATIONS","ALL_ROUNDS","ALL_POINTS","ALL_USERS","ME","ADD_LOCATION","ADD_ROUND","DELETE_ROUND","ADD_CACHED_POINTS","useTimeout","logoutTimeout","logout","setTimeouts","setTimeout","useEffect","events","resetTimeout","clearTimeout","addEventListener","App","setCurrentRoundId","currentRound","setCurrentRound","setCurrentPlayers","setCurrentLocation","errorMessage","setErrorMessage","setTrackIndex","token","setToken","client","useApolloClient","setSavedState","uploadingPointsState","setUploadingPointsState","localStorage","getItem","loginMutation","variables","response","loginToken","loginUsername","resetStore","setItem","clear","sessionTimeout","handleError","graphQLErrors","message","networkError","errorArray","result","errors","useMutation","onError","update","store","serverPoints","addCachedPoints","localPoints","readQuery","query","roundId","okState","serverPoint","foundMatch","localPoint","allRoundsInStore","roundPoints","roundPoint","acc","getPlayerTotals","filteredRound","savedRound","filteredRounds","writeQuery","concat","addCachedPointsMutation","dataInStore","addedRound","addRound","addRoundMutation","addedLocation","addLocation","addLocationMutation","deletedRound","deleteRoundMutation","addPointToCache","userId","originalState","newPoint","__typename","crypto","randomBytes","deleteLastTrackFromCache","i1","i2","uploadPointsFromCacheToServer","pointIds","userIds","trackIndexes","useQuery","skip","locationName","locationId","Container","includes","max","wshost","origin","replace","wsuri","wsLink","WebSocketLink","uri","httpLink","createHttpLink","authLink","setContext","_","headers","authorization","link","split","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"mUAsCeA,G,MAnCI,SAACC,GAClB,IAAKA,EAAMC,KACT,OAAO,KAGT,GAAID,EAAME,QAAQC,QAChB,OAAO,2CAET,GAAIH,EAAME,QAAQE,MAEhB,OADAC,QAAQC,IAAI,QAASN,EAAME,QAAQE,OAC5B,yCAGT,IAAMG,EAAU,SAACC,GACfR,EAAMO,QAAQC,IAKVC,EAAOT,EAAME,QAAQQ,KAAKC,GAC1BC,EAAiBZ,EAAMY,eAC7B,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,eAAeC,QAAS,WAAQP,EAAQ,UAAvD,QACCK,EACC,yBAAKC,UAAU,eAAeC,QAAS,WAAQP,EAAQ,WAAvD,kBACE,yBAAKM,UAAU,eAAeC,QAAS,WAAQP,EAAQ,WAAvD,aAEJ,yBAAKM,UAAU,QAAQJ,EAAKM,SAA5B,IAAuCN,EAAKO,MAAQ,WAAa,GAAjE,aACA,yBAAKH,UAAU,eAAeC,QAAS,WAAQP,EAAQ,MAZzDP,EAAMiB,aAYJ,aC6ISC,EAhKD,SAAClB,GACb,IAAKA,EAAMC,KACT,OAAO,KAET,IAAKD,EAAMmB,MACT,OAAO,KAET,GAAInB,EAAMoB,eAAejB,QACvB,OAAO,2CAET,GAAIH,EAAMoB,eAAehB,MAEvB,OADAC,QAAQC,IAAI,QAASN,EAAMoB,eAAehB,OACnC,yCAET,IAAMiB,EAAarB,EAAMqB,WACnBC,EAAkBtB,EAAMsB,gBACxBC,EAAiBF,GAAcC,EAC/BE,EAAUxB,EAAMmB,MAAMM,MACtBC,EAAa1B,EAAM0B,WACnBC,EAAY3B,EAAMoB,eAAeV,KAAKiB,UACtCR,EAAQnB,EAAMmB,MAChBS,EAAQJ,EAAQK,QAEdC,EAjCS,SAACC,GAAmB,IAAdC,EAAa,wDAAN,EACxBC,EAAOD,EAMX,OALAD,EAAIG,SAAQ,SAAAC,GACNF,EAAOE,IACTF,EAAOE,MAGJF,EA0BeG,CAAST,EAAUU,KAAI,SAAAC,GAAI,OAAIA,EAAKZ,eAAc,GACxE,IAAoB,IAAhBA,GAAqBI,GAAiB,EAGxC,OADA9B,EAAMuC,YAAYT,GACX,KAET,IASMU,EAA8B,SAACC,GAAD,OAClC,WACMX,EAAgB,IAAMW,GACxBzC,EAAM0C,cAER1C,EAAMuC,YAAYE,KAEhBE,EAAyB,SAACC,EAAQnC,GAAT,OAC7B,WACMmC,GAAU,GACZ5C,EAAM6C,YAAYD,EAAQnC,EAAKqC,MAGrClB,EAAMmB,MAAK,SAACC,EAAIC,GACd,IADsB,IAAD,WACZC,GACP,IAAMjB,EAAON,EAAUwB,QAAO,SAAAC,GAAK,OAAIA,EAAM1B,aAAewB,KACtDG,EAAepB,EAAKkB,QAAO,SAAAC,GAAK,OAAIA,EAAM3C,KAAKqC,KAAOE,EAAGF,MACzDQ,EAAerB,EAAKkB,QAAO,SAAAC,GAAK,OAAIA,EAAM3C,KAAKqC,KAAOG,EAAGH,MAC/D,GAA4B,IAAxBO,EAAaE,QAAwC,IAAxBD,EAAaC,OAC5C,MAAM,CAAN,EAAO,GAET,IAAMC,EAAMH,EAAa,GAAGT,OACtBa,EAAMH,EAAa,GAAGV,OAC5B,OAAIY,EAAMC,EACF,CAAN,EAAO,GACED,EAAMC,EACT,CAAN,GAAQ,QADH,GAXAP,EAAIxB,EAAYwB,GAAK,EAAGA,IAAK,CAAC,IAAD,IAA7BA,GAA6B,kCAetC,OAAO,KAaT,IAXA,IAUMQ,EAAe,GACZR,EAAI,EAAGA,EAAIpB,EAAgB,EAAGoB,IACrCQ,EAAaC,KAAK,wBAAIC,IAAKV,GAAIA,EAAI,IAErC,OACE,yBAAKrC,UAAU,OACb,6BACE,4BAAKM,EAAM0C,SAASC,MACpB,4BACE,yBAAKjD,UAAU,OACb,yBAAKA,UAAU,oBACb,4BAAQC,QAAS0B,EAA4Bd,EAAa,IAAK,KADjE,SAESA,EAAa,EACpB,4BAAQZ,QAAS0B,EAA4Bd,EAAa,IAAK,QAIrE,6BAEA,2BAAOb,UAAU,mBACf,+BACE,4BACE,qCAAc,4BAAI,yBAAKA,UAAU,UAAf,WAEhB6C,EAEF,uCAGJ,+BAEGlC,EAAQa,KAAI,SAAA0B,GACX,IAAMC,EAAcrC,EAAUwB,QAAO,SAAAC,GAAK,OAAIA,EAAM3C,KAAKqC,KAAOiB,EAAOjB,MACvE,GAAIkB,EAAa,CACfA,EAAYjB,MAAK,SAACkB,EAAIC,GAAL,OAAYD,EAAGvC,WAAawC,EAAGxC,cAChD,IAAMyC,EAA+B,IAAvBH,EAAYT,OACxB,EAAIS,EAAY3B,KAAI,SAAAC,GAAI,OAAIA,EAAKM,UAAQwB,QAAO,SAACC,EAAKjB,GAAN,OAAgBiB,EAAMjB,KACxE,OACE,wBAAKQ,IAAKG,EAAOjB,IACf,wBAAIc,IAAI,SAjDV,SAACG,GACf,IAAK,IAAIb,EAAI,EAAGA,EAAItB,EAAM2B,OAAQL,IAChC,GAAIa,IAAWnC,EAAMsB,GACnB,OAAOA,EAAI,EAAI,IAGnB,MAAO,MA2C0BoB,CAAQP,IACzB,wBAAIH,IAAKG,EAAOhD,UAAWgD,EAAOhD,UAEhCiD,EAAY3B,KAAI,SAAAC,GACd,OAAIA,EAAKZ,aAAeA,EACd,wBAAIkC,IAAKtB,EAAKZ,WAAaqC,EAAOjB,IACxC,gCACE,4BAAQjC,UAAU,YAAYC,QAAS6B,EAAuBL,EAAKM,OAAS,EAAGN,EAAK7B,OAApF,KACC6B,EAAKM,OACN,4BAAQ/B,UAAU,YAAYC,QAAS6B,EAAuBL,EAAKM,OAAS,EAAGN,EAAK7B,OAApF,OAII,wBAAImD,IAAKtB,EAAKZ,WAAaqC,EAAOjB,IAAKR,EAAKM,WAI1D,4BAAKuB,IAGJ,OACL,4BAAI,+CAMd,6BACA,yBAAKtD,UAAU,oBACZQ,GAAc,6CACbA,GAAc,yBAAKR,UAAU,SAAQ,mDAEzC,6BACA,yBAAKA,UAAU,OACb,4BAAQA,UAAU,YAAY0D,KAAK,oBAAoBzD,QA3H1B,WACjCd,EAAMwE,oBA0HF,qBACA,4BAAQ3D,UAAU,YAAY0D,KAAK,eAAezD,QAzHzB,WAC7Bd,EAAMyE,gBAwHF,kBACElD,GAAkB,4BAAQV,UAAU,YAAY6D,SAAUnD,EAAgBT,QAvHlD,WAC9Bd,EAAM2E,iBAsHkB,oBC7IbC,EAxBK,SAAC5E,GAAW,IAAD,EACG6E,mBAAS,IADZ,mBACtBhB,EADsB,KACZiB,EADY,KAG7B,IAAK9E,EAAMC,KACT,OAAO,KAOT,OACE,6BACE,6BACE,2BACE8E,MAAOlB,EACPmB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBH,EAAYG,EAAOF,WAGjD,4BAAQlE,UAAU,YAAYC,QAbd,WAClBd,EAAMkF,eAAerB,GACrBiB,EAAY,MAWV,sBC+ESK,EAjGE,SAACnF,GAChB,IAAKA,EAAMC,KACT,OAAO,KAET,IAAMmF,EAAepF,EAAMqF,kBAAkB3E,KAAK0E,aAC5CE,EAAWtF,EAAMuF,cAAc7E,KAAK4E,SACpCE,EAAkBxF,EAAMwF,gBACxBC,EAAiBzF,EAAMyF,eAQ7B,OAAIzF,EAAMqF,kBAAkBlF,SAAWH,EAAMuF,cAAcpF,QAClD,2CAELH,EAAMqF,kBAAkBjF,OAASJ,EAAMuF,cAAcnF,MAEhD,yCAEJoF,EA0BH,6BACE,yCACA,yBAAK3E,UAAU,YAAYC,QAASd,EAAM0F,oBAAoBF,IAC3DA,EAAgB1B,MAEnB,6BACE,2BAAOjD,UAAU,mBACf,+BACE,wBAAI+C,IAAI,UACN,kDAGJ,+BACE,4BACG6B,EAAepD,KAAI,SAAA5B,GAAI,OACtB,wBAAII,UAAU,YAAY+C,IAAKnD,EAAKqC,GAAIhC,QAASd,EAAM2F,gBAAgBlF,IAAQA,EAAKM,iBAO5F0E,EAAelC,OAAS,GAAKiC,GAC7B,6BACE,0BAAMI,SA/DQ,SAACC,GAErBA,EAAMC,iBACN9F,EAAM+F,kBA6DE,4BAAQlF,UAAU,YAAYmF,KAAK,UAAnC,WAIN,6BACE,2BAAOnF,UAAU,mBACf,+BACE,4BACE,6CAGJ,+BACGyE,EAASjD,KAAI,SAAA5B,GAAI,OAChB,wBAAImD,IAAKnD,EAAKqC,IACZ,wBAAIjC,UAAU,YAAYC,QAASd,EAAM2F,gBAAgBlF,IAAQA,EAAKM,kBA/DhF,6BACE,+CACA,6BACE,2BAAOF,UAAU,mBACf,+BACE,wBAAI+C,IAAI,UACN,2CAGJ,+BACGwB,EAAa/C,KAAI,SAAAwB,GAAQ,OACxB,wBAAID,IAAKC,EAASf,IAChB,wBAAIjC,UAAU,YAAYC,QAASd,EAAM0F,oBAAoB7B,IAAYA,EAASC,aAM5F,kBAAC,EAAD,CAAa7D,MAAM,EACjBiF,eAAgBlF,EAAMkF,mBCgBjBe,EA5DA,SAACjG,GACd,IAAKA,EAAMC,KACT,OAAO,KAET,GAAID,EAAMkG,eAAe/F,QACvB,OAAO,2CAET,GAAIH,EAAMkG,eAAe9F,MAEvB,OADAC,QAAQC,IAAI,QAASN,EAAMkG,eAAe9F,OACnC,yCAGT,IAAM+F,EAAmB,SAAChF,GAAD,OACvB,WACEnB,EAAMoG,SAASjF,KAKbkF,EAASrG,EAAMkG,eAAexF,KAAK4F,UAEzC,OADAD,EAAOtD,MAAK,SAACwD,EAAIC,GAAL,OAAYA,EAAGC,KAAOF,EAAGE,QAChCJ,EAIH,6BACE,2BAAOxF,UAAU,mBACf,+BACE,wBAAI+C,IAAI,UACN,wCAAiB,oCAAa,uCAAgB,wCAGlD,+BACGyC,EAAOhE,KAAI,SAAAlB,GAIV,IAHA,IAAMuF,EAAI,IAAIC,KAAKxF,EAAMsF,MACnBG,EAAaF,EAAEG,UAAY,KAAOH,EAAEI,WAAa,GAAK,IAAMJ,EAAEK,cAAgB,IAAML,EAAEM,WAAa,IAAMN,EAAEO,aAAe,IAAMP,EAAEQ,aACpIC,EAAa,GACRjE,EAAI,EAAGA,EAAI/B,EAAMM,MAAM8B,OAAQL,IAAK,CAC3C,IAAMzC,EAAOU,EAAMM,MAAMyB,GACnBiB,EAAQhD,EAAMiG,OAASjG,EAAMiG,OAAOlE,GAAK,KAC/CiE,EAAWxD,KAAKlD,EAAKM,SAASsG,YAAclD,EAAQ,IAAMA,EAAMkD,WAAa,KAE/E,IAAMC,EAAYH,EAAWI,KAAK,MAClC,OACE,wBAAI3D,IAAKzC,EAAM2B,IACb,wBAAIjC,UAAU,UAAUC,QAASqF,EAAiBhF,IAASA,EAAM0C,SAASC,MAAU,4BAAK8C,GACzF,4BAAI,8BAAOU,IACX,4BACE,4BAAQzG,UAAU,YAAYC,QAAS,WAAY0G,OAAOC,QAAQ,gDAhC9D,SAACtG,GACnBnB,EAAM0H,YAAYvG,GA+B8GuG,CAAYvG,KAA9H,aA1BP,MCsBIwG,EA5CG,SAAC3H,GAAW,IAAD,EACK6E,mBAAS,IADd,mBACpB9D,EADoB,KACV6G,EADU,OAEK/C,mBAAS,IAFd,mBAEpBgD,EAFoB,KAEVC,EAFU,KAG3B,IAAK9H,EAAMC,KACT,OAAO,KAET,IAAM8H,EAAK,uCAAG,WAAOlC,GAAP,SAAAmC,EAAA,sDACZnC,EAAMC,iBACN9F,EAAMiI,QAAQlH,EAAU8G,GAFZ,2CAAH,sDAUX,OACE,yBAAKhH,UAAU,SACb,oDACA,0BAAM+E,SAAUmC,EAAOlH,UAAU,WAC/B,yBAAKA,UAAU,SACb,2CACA,2BAAOiC,GAAG,WACRkD,KAAK,OACLkC,YAAY,WACZnD,MAAOhE,EACPiE,SAbe,SAACa,GACxB+B,EAAY/B,EAAMZ,OAAOF,WAcrB,yBAAKlE,UAAU,SACb,2CACA,2BAAOiC,GAAG,WACRkD,KAAK,WACLkC,YAAY,WACZnD,MAAO8C,EACP7C,SAxBe,SAACa,GACxBiC,EAAYjC,EAAMZ,OAAOF,WAyBrB,4BAAQlE,UAAU,YAAYmF,KAAK,UAAnC,Y,svFCrCD,IAAMmC,EAAQC,IAAH,KAkBLC,GATcD,IAAH,KASKA,IAAH,MAQbE,EAAaF,IAAH,KAWVG,EAAaH,IAAH,KAaVI,EAAYJ,IAAH,KAQTK,EAAKL,IAAH,KASFM,EAAeN,IAAH,KASZO,EAAYP,IAAH,KAoBTQ,EAAeR,IAAH,KAoBZS,GAXWT,IAAH,KAWYA,IAAH,MC1EfU,GD2FsBV,IAAH,KCpIf,SAACnH,GAClB,IACI8H,EAEEC,EAAS,WACb3I,QAAQC,IAAI,4BACZW,KAGIgI,EAAc,WAElBF,EAAgBG,WAAWF,EAVT,OAkBpBG,qBAAU,WACR,IAAMC,EAAS,CACb,OACA,YACA,QACA,SACA,YAGIC,EAAe,WAZjBN,GAAeO,aAAaP,GAc9BE,KAGF,IAAK,IAAI/F,KAAKkG,EACZ5B,OAAO+B,iBAAiBH,EAAOlG,GAAImG,GAGrCJ,SC6bWO,EA5cH,SAACxJ,GAAW,IAAD,EACuB6E,mBAAS,MADhC,mBACdjE,EADc,KACE6I,EADF,OAEmB5E,mBAAS,MAF5B,mBAEd6E,EAFc,KAEAC,EAFA,OAGuB9E,mBAAS,IAHhC,mBAGdY,EAHc,KAGEmE,EAHF,OAIyB/E,mBAAS,MAJlC,mBAIdW,EAJc,KAIGqE,EAJH,OAKmBhF,mBAAS,MAL5B,mBAKdiF,EALc,KAKAC,EALA,OAMelF,mBAAS,GANxB,mBAMdnD,EANc,KAMFsI,EANE,OAOKnF,mBAAS,MAPd,mBAOdoF,EAPc,KAOPC,EAPO,QASGrF,mBAAS,QATZ,qBASdrE,GATc,MASRD,GATQ,MAUf4J,GAASC,cAVM,GAWevF,oBAAS,GAXxB,qBAWdxD,GAXc,MAWFgJ,GAXE,SAYmCxF,oBAAS,GAZ5C,qBAYdyF,GAZc,MAYQC,GAZR,MAcrBpB,qBAAU,WACR,IAAMc,EAAQO,aAAaC,QAAQ,SACnCP,EAASD,KACR,IAEH,IAeMhC,GAAO,uCAAG,WAAOlH,EAAU8G,GAAjB,mBAAAG,EAAA,sEACS0C,GAAc,CACnCC,UAAW,CACT5J,WACA8G,cAJU,YACR+C,EADQ,4BAQNC,EAAaD,EAASlK,KAAKqH,MAAMkC,MACjCa,EAAgBF,EAASlK,KAAKqH,MAAMhH,UACtC8J,EAVQ,iCAWJV,GAAOY,aAXH,OAYVP,aAAaQ,QAAQ,QAASH,GAC9BL,aAAaQ,QAAQ,WAAYF,GACjCZ,EAASW,GACTtK,GAAQ,QACRwJ,EAAgB,MAhBN,4CAAH,wDAqBP9I,GAAQ,uCAAG,sBAAA+G,EAAA,6DACfkC,EAAS,MACTM,aAAaS,QAFE,SAGTd,GAAOY,aAHE,2CAAH,qDAKdjC,EAAW7H,IACPjB,EAAMkL,iBACR7K,QAAQC,IAAI,qBACZW,MAEF,IAAMkK,GAAc,SAAC/K,GAEnB,GADAC,QAAQC,IAAI,QAASF,GACjBA,EAAMgL,cAAc7H,OAAS,EAC/BwG,EAAgB3J,EAAMgL,cAAc,GAAGC,SACvCnC,YAAW,WACTa,EAAgB,QACf,UAEA,GAAI3J,EAAMkL,aAAc,CAC3B,IAAMC,EAAanL,EAAMkL,aAAaE,OAAOC,OACzCF,GAAcA,EAAWhI,OAAS,IACpCwG,EAAgBwB,EAAW,GAAGF,SAC9BnC,YAAW,WACTa,EAAgB,QACf,QA/EY,GAsFa2B,YAAY7C,EAAmB,CAC/D8C,QAASR,GACTS,OAAQ,SAACC,EAAOjB,GACd,IAAMkB,EAAelB,EAASlK,KAAKqL,gBAO7BC,EANYH,EAAMI,UAAU,CAChCC,MAAO3D,EACPoC,UAAW,CACTwB,QAASvL,KAGmBe,UAC5ByK,GAAU,EAEd,GADA/B,IAAc,GACVyB,EAAavI,SAAWyI,EAAYzI,OACtC6I,GAAU,OAkBV,GAhBAN,EAAa5J,SAAQ,SAAAmK,GACnB,IAAIC,GAAa,EACjBN,EAAY9J,SAAQ,SAAAqK,GACdF,EAAYlL,MAAM2B,KAAOyJ,EAAWpL,MAAM2B,IACzCuJ,EAAY5L,KAAKqC,KAAOyJ,EAAW9L,KAAKqC,IACxCuJ,EAAY3K,aAAe6K,EAAW7K,YACtC2K,EAAYzJ,SAAW2J,EAAW3J,SACrC0J,GAAa,MAIZA,IACHF,GAAU,MAIVA,GAAWN,EAAavI,OAAS,EAAG,CACtC,IAAM4I,EAAUL,EAAa,GAAG3K,MAAM2B,GAChC0J,EAAmBX,EAAMI,UAAU,CACvCC,MAAO5D,IAEHlB,EArGU,SAACjG,EAAOyB,GAC9B,IAAMuJ,EAAUhL,EAAM2B,GAChBrB,EAAQN,EAAMM,MAChB2F,EAAS,GACPqF,EAAc7J,EAAOO,QAAO,SAAAC,GAAK,OAAIA,EAAMjC,MAAM2B,GAAGuE,aAAe8E,EAAQ9E,cAMjF,OALA5F,EAAMS,SAAQ,SAAAzB,GACZ,IACM0D,EADkBsI,EAAYtJ,QAAO,SAAAuJ,GAAU,OAAIA,EAAWjM,KAAKqC,GAAGuE,aAAe5G,EAAKqC,GAAGuE,cAAYhF,KAAI,SAAAe,GAAK,OAAIA,EAAMR,UACpGwB,QAAO,SAACuI,EAAK/J,GAAN,OAAiB+J,EAAM/J,IAAQ,GACpEwE,EAAOzD,KAAKQ,MAEPiD,EA2FcwF,CAAgBlD,EAAcoC,GACvCe,EAAgBL,EAAiBlG,UAAUnD,QAAO,SAAAhC,GAAK,OAAIA,EAAM2B,GAAGuE,aAAe8E,EAAQ9E,cAAY,GACvGyF,EAAU,eACXD,EADW,CAEdzF,OAAQA,IAEJ2F,EAAiBP,EAAiBlG,UAAUnD,QAAO,SAAAhC,GAAK,OAAIA,EAAM2B,GAAGuE,aAAe8E,EAAQ9E,cAClGwE,EAAMmB,WAAW,CACfd,MAAO5D,EACP5H,KAAM,CACJ4F,UAAWyG,EAAeE,OAAOH,MAMzCzC,GAAc+B,MArDXc,GAtFc,wBA+IMxB,YAAY/C,EAAW,CAChDgD,QAASR,GACTS,OAAQ,SAACC,EAAOjB,GACd,IAAIuC,EAActB,EAAMI,UAAU,CAChCC,MAAO5D,IAEH8E,EAAaxC,EAASlK,KAAK2M,SAC3BpL,EAAOkL,EAAY7G,UAAUnD,QAAO,SAAAhC,GAAK,OAAIA,EAAM2B,KAAOsK,EAAWtK,MAAImK,OAAOG,GACtFjD,GAAO6C,WAAW,CAChBd,MAAO5D,EACP5H,KAAM,CAAE4F,UAAWrE,QAVlBqL,GA/Ic,wBA6JS5B,YAAYhD,EAAc,CACtDiD,QAASR,GACTS,OAAQ,SAACC,EAAOjB,GACd,IAAIuC,EAActB,EAAMI,UAAU,CAChCC,MAAO7D,IAEHkF,EAAgB3C,EAASlK,KAAK8M,YAC9BvL,EAAOkL,EAAY/H,aAAajC,QAAO,SAAAU,GAAQ,OAAIA,EAASf,KAAOyK,EAAczK,MAAImK,OAAOM,GAClGpD,GAAO6C,WAAW,CAChBd,MAAO7D,EACP3H,KAAM,CAAE0E,aAAcnD,QAVrBwL,GA7Jc,wBA2KS/B,YAAY9C,EAAc,CACtD+C,QAASR,GACTS,OAAQ,SAACC,EAAOjB,GACd,IAAIuC,EAActB,EAAMI,UAAU,CAChCC,MAAO5D,IAEHoF,EAAe9C,EAASlK,KAAKgH,YAC7BzF,EAAOkL,EAAY7G,UAAUnD,QAAO,SAAAhC,GAAK,OAAIA,EAAM2B,KAAO4K,EAAa5K,MAC7EqH,GAAO6C,WAAW,CAChBd,MAAO5D,EACP5H,KAAM,CAAE4F,UAAWrE,QAVlB0L,GA3Kc,wBAyLGjC,YAAYvD,EAAO,CACzCwD,QAASR,GACTS,OAAQ,SAACC,EAAOjB,OAFXF,GAzLc,qBAgNfkD,GAAkB,SAACzB,EAAS0B,EAAQnM,EAAYkB,GACpD,IAAMkL,EAAgB3D,GAAO8B,UAAU,CACrCC,MAAO3D,EACPoC,UAAW,CACTwB,QAASA,KAGPlK,EAAO6L,EAAcnM,UAAUwB,QAAO,SAAAC,GAAK,OAC/CA,EAAM3C,KAAKqC,KAAO+K,GAAUzK,EAAM1B,aAAeA,KACnD,GAAIO,EAAKsB,OAAS,EAAG,CACnB,IAAM7C,EAAOuB,EAAK,GAClBkI,GAAO6C,WAAW,CAChBd,MAAO3D,EACPoC,UAAW,CACTwB,QAASA,GAEXzL,KAAM,CACJiB,UAAWmM,EAAcnM,UACtBwB,QAAO,SAAAC,GAAK,OAAIA,EAAMN,KAAOpC,EAAKoC,MAClCmK,OAFQ,eAGJvM,EAHI,CAIPkC,mBAIH,CACL,IAAMmL,EAAW,CACf5M,MAAO,CAAE2B,GAAIqJ,EAAS6B,WAAY,SAClCvN,KAAM,CAAEqC,GAAI+K,EAAQG,WAAY,QAChCtM,aACAkB,SACAE,GA3NGmL,IAAOC,YAAY,IAAI7G,SAAS,OA4NnC2G,WAAY,SAEd7D,GAAO6C,WAAW,CAChBd,MAAO3D,EACPoC,UAAW,CACTwB,QAASA,GAEXzL,KAAM,CACJiB,UAAWmM,EAAcnM,UACtBsL,OAAOc,MAIhB1D,IAAc,IAGV8D,GAA2B,SAAChC,GAChC,IAAM2B,EAAgB3D,GAAO8B,UAAU,CACrCC,MAAO3D,EACPoC,UAAW,CACTwB,QAASA,KAGb,GAAuC,IAAnC2B,EAAcnM,UAAU4B,OAA5B,CAGA,IAAMzB,EAAgBgM,EAAcnM,UACjCU,KAAI,SAAAe,GAAK,OAAIA,EAAM1B,cACnBqB,MAAK,SAACqL,EAAIC,GAAL,OAAYA,EAAKD,KAAI,GAC7BjE,GAAO6C,WAAW,CAChBd,MAAO3D,EACPoC,UAAW,CACTwB,QAASA,GAEXzL,KAAM,CACJiB,UAAWmM,EAAcnM,UAAUwB,QAAO,SAAAC,GAAK,OAAIA,EAAM1B,aAAeI,QAG5EuI,IAAc,GACV3I,GAAcI,GAChBkI,EAAclI,EAAgB,KAI5BwM,GAA6B,uCAAG,8BAAAtG,EAAA,yDAQG,KANjC8F,EAAgB3D,GAAO8B,UAAU,CACrCC,MAAO3D,EACPoC,UAAW,CACTwB,QAASvL,MAGKe,UAAU4B,OARQ,wDAW9B5B,EAAYmM,EAAcnM,UAXI,kBAa5B4I,IAAwB,GAbI,uBAc5B2C,GAAwB,CAC5BvC,UAAW,CACTwB,QAASvL,EACT2N,SAAU5M,EAAUU,KAAI,SAAAe,GAAK,OAAIA,EAAMN,GAAGuE,cAC1CmH,QAAS7M,EAAUU,KAAI,SAAAe,GAAK,OAAIA,EAAM3C,KAAKqC,GAAGuE,cAC9CoH,aAAc9M,EAAUU,KAAI,SAAAe,GAAK,OAAIA,EAAM1B,cAC3CkB,OAAQjB,EAAUU,KAAI,SAAAe,GAAK,OAAIA,EAAMR,aApBP,OAuBlC2H,IAAwB,GAvBU,kDAyBlCY,GAAY,EAAD,IAzBuB,0DAAH,qDA6B7B3G,GAAe,uCAAG,sBAAAwD,EAAA,sDACtBmG,GAAyBvN,GADH,2CAAH,qDAGfiC,GAAW,uCAAG,WAAOD,EAAQiL,GAAf,SAAA7F,EAAA,sDAClB4F,GAAgBhN,EAAgBiN,EAAQnM,EAAYkB,GADlC,2CAAH,wDAaXyC,GAAoBqJ,YAASrG,EAAe,CAChDsG,MAAO1E,IAEH1E,GAAgBmJ,YAASlG,EAAW,CACxCmG,MAAO1E,IAEH7I,GAAiBsN,YAASnG,EAAY,CAC1CoG,MAAO/N,IAAmBqJ,EAC1BU,UAAW,CACTwB,QAASvL,KAIPsF,GAAiBwI,YAASpG,EAAY,CAC1CqG,MAAO1E,IAmBH/E,GAAc,uCAAG,WAAO0J,GAAP,SAAA5G,EAAA,sEACfyF,GACJ,CACE9C,UAAW,CACT7G,KAAM8K,KAJS,2CAAH,sDAUdlH,GAAW,uCAAG,WAAOvG,GAAP,SAAA6G,EAAA,sEACZ2F,GACJ,CACEhD,UAAW,CACTwB,QAAShL,EAAM2B,MAJH,2CAAH,sDASXiD,GAAa,uCAAG,4BAAAiC,EAAA,sEACGsF,GACrB,CACE3C,UAAW,CACT6D,QAAS/I,EAAepD,KAAI,SAAA5B,GAAI,OAAIA,EAAKqC,MACzC+L,WAAYrJ,EAAgB1C,MALd,OACd8H,EADc,OASpBjB,EAAgBiB,EAASlK,KAAK2M,UAC9B5D,EAAkBmB,EAASlK,KAAK2M,SAASvK,IAVrB,2CAAH,qDAYb2B,GAAW,uCAAG,sBAAAuD,EAAA,sEACZsG,KADY,OAElB3E,EAAgB,MAChBF,EAAkB,MAClBG,EAAkB,IAClBC,EAAmB,MACnBtJ,GAAQ,QANU,2CAAH,qDAQXL,GAAUwO,YAASjG,EAAI,CAC3BkG,MAAO1E,IAET,OACE,kBAAC6E,EAAA,EAAD,KACG7E,GAAS,kBAAC,EAAD,CAAYhK,MAAM,EAC1BgB,SAAUA,GACVV,QAASA,GACTL,QAASA,GACTU,eAAgBA,IAEjBkJ,GAAgB,yBAAKjJ,UAAU,SAASiJ,IAEvCG,GACA,kBAAC,EAAD,CACEhC,QAASA,GACThI,MAAM,EACNkL,YAAaA,KAEhBlB,IAAUrJ,GAAkB,kBAAC,EAAD,CAC3BsE,eAAgBA,GAChBG,kBAAmBA,GACnBE,cAAeA,GACfG,oBA/EsB,SAAC7B,GAAD,OAC1B,WAEIgG,EADEhG,IAAa2B,EACI,KAEA3B,KA2EnB8B,gBAxEkB,SAAClF,GAAD,OACtB,WACMgF,EAAesJ,SAAStO,GAC1BmJ,EAAkBnE,EAAetC,QAAO,SAAAY,GAAM,OAAIA,IAAWtD,MAE7DmJ,EAAkBnE,EAAewH,OAAOxM,MAoExC+E,gBAAiBA,EACjBC,eAAgBA,EAChBM,cAAeA,GACf9F,KAAe,UAATO,KAEPyJ,GAAS,kBAAC,EAAD,CACR/D,eAAgBA,GAChBE,SA9Gc,SAACjF,GACnBwI,EAAgBxI,GAChBsI,EAAkBtI,EAAM2B,IACxBkH,GAAe,GACfzJ,GAAQ,UA2GJmH,YAAaA,GACbzH,KAAe,SAATO,KAEPyJ,GAASrJ,GAAkB,kBAAC,EAAD,CAC1BQ,eAAgBA,GAChBD,MAAOuI,EACPhH,YA1PqB,WACzB,IAMMf,EANgBwI,GAAO8B,UAAU,CACrCC,MAAO3D,EACPoC,UAAW,CACTwB,QAASvL,KAGmBe,UAC5BqN,GAAO,EACXrN,EAAUO,SAAQ,SAAAkB,GACZA,EAAM1B,WAAasN,IACrBA,EAAM5L,EAAM1B,eAGhBgI,EAAajI,MAAMS,SAAQ,SAAA6B,GACzB6J,GAAgBhN,EAAgBmD,EAAOjB,GAAIkM,EAAM,EAAG,OA4OlDnM,YAAaA,GACb2B,gBAAiBA,GACjBjC,YA3Hc,SAACE,GACnBuH,EAAcvH,IA2HVf,WAAYA,EACZ+C,YAAaA,GACbE,aAAc2J,GACdrO,KAAe,UAATO,GACNa,WAAYA,GACZC,gBAAiBgJ,KAEnB,6BACE,6BACA,+E,wEC/cF2E,GAASzH,OAAO3D,SAASqL,OAAOC,QAAQ,QAAS,MACnDC,GAAK,UAAMH,GAAN,YAST5O,QAAQC,IAAI,gBAAiB8O,IAC7B/O,QAAQC,IAAI,WATE,YAWd,IAAM+O,GAAS,IAAIC,KAAc,CAC/BC,IAAKH,KAIDI,GAAWC,YAAe,CAC9BF,IAjBY,aAoBRG,GAAWC,cAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1B5F,EAAQO,aAAaC,QAAQ,SACnC,MAAO,CACLoF,QAAQ,eACHA,EADE,CAELC,cAAe7F,EAAK,iBAAaA,GAAU,WAK3C8F,GAAOC,cACX,YAAgB,IAAb9D,EAAY,EAAZA,MAAY,EACe+D,aAAkB/D,GAAtCgE,EADK,EACLA,KAAMC,EADD,EACCA,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,IAE3Cd,GACAK,GAASzC,OAAOuC,KAGZrF,GAAS,IAAIiG,IAAa,CAC9BL,QACAM,MAAO,IAAIC,MAGbC,IAASC,OACP,kBAAC,IAAD,CAAgBrG,OAAQA,IACtB,kBAAC,IAAD,CAAqBA,OAAQA,IAC3B,kBAAC,EAAD,QAGJsG,SAASC,eAAe,U","file":"static/js/main.2a9c29e5.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles.css'\n\nconst Navigation = (props) => {\n  if (!props.show) {\n    return null\n  }\n\n  if (props.meQuery.loading) {\n    return <div>loading...</div>\n  }\n  if (props.meQuery.error) {\n    console.log('error', props.meQuery.error)\n    return <div>error...</div>\n  }\n\n  const setPage = (page) => {\n    props.setPage(page)\n  }\n  const doLogout = () => {\n    props.doLogout()\n  }\n  const user = props.meQuery.data.me\n  const currentRoundId = props.currentRoundId\n  return (\n    <div className=\"ui secondary menu\">\n      <div className=\"item pointer\" onClick={() => { setPage('main') }}>main</div>\n      {currentRoundId ?\n        <div className=\"item pointer\" onClick={() => { setPage('round') }}>continue round</div>\n        : <div className=\"item pointer\" onClick={() => { setPage('round') }}>new round</div>\n      }\n      <div className=\"item\">{user.username} {user.admin ? '(admin) ' : ''}logged in</div>\n      <div className=\"item pointer\" onClick={() => { setPage(null); doLogout() }}>logout</div>\n\n    </div>\n  )\n}\n\nexport default Navigation\n\n","import React from 'react';\nimport '../styles.css'\n\nconst maxValue = (arr, def = -1) => {\n  let temp = def\n  arr.forEach(element => {\n    if (temp < element) {\n      temp = element\n    }\n  });\n  return temp\n}\n\nconst Round = (props) => {\n  if (!props.show) {\n    return null\n  }\n  if (!props.round) {\n    return null\n  }\n  if (props.allPointsQuery.loading) {\n    return <div>loading...</div>\n  }\n  if (props.allPointsQuery.error) {\n    console.log('error', props.allPointsQuery.error)\n    return <div>error...</div>\n  }\n  const savedState = props.savedState\n  const uploadingPoints = props.uploadingPoints\n  const buttonDisabled = savedState || uploadingPoints\n  const players = props.round.users\n  const trackIndex = props.trackIndex\n  const allPoints = props.allPointsQuery.data.allPoints\n  const round = props.round\n  let order = players.slice()\n\n  const maxTrackIndex = maxValue(allPoints.map(play => play.trackIndex), -1)\n  if (trackIndex === -1 && maxTrackIndex > -1) {\n    //    console.log('change track index to', maxTrackIndex)\n    props.changeTrack(maxTrackIndex)\n    return null\n  }\n  const handleDeleteLastTrackClick = () => {\n    props.deleteLastTrack()\n  }\n  const handleRoundFinishClick = () => {\n    props.finishRound()\n  }\n  const handleUploadPointsClick = () => {\n    props.uploadPoints()\n  }\n  const handleTrackIndexChangeClick = (index) =>\n    () => {\n      if (maxTrackIndex + 1 === index) {\n        props.addNewTrack()\n      }\n      props.changeTrack(index)\n    }\n  const handlePointChangeClick = (points, user) =>\n    () => {\n      if (points > -1) {\n        props.updatePoint(points, user.id)\n      }\n    }\n  order.sort((u1, u2) => {\n    for (let i = trackIndex; i >= 0; i--) {\n      const temp = allPoints.filter(point => point.trackIndex === i)\n      const u1pointArray = temp.filter(point => point.user.id === u1.id)\n      const u2pointArray = temp.filter(point => point.user.id === u2.id)\n      if (u1pointArray.length === 0 || u2pointArray.length === 0) {\n        return 0\n      }\n      const u1p = u1pointArray[0].points\n      const u2p = u2pointArray[0].points\n      if (u1p > u2p) {\n        return 1\n      } else if (u1p < u2p) {\n        return -1\n      }\n    }\n    return 0\n  })\n  const orderOf = (player) => {\n    for (let i = 0; i < order.length; i++) {\n      if (player === order[i]) {\n        return i + 1 + '.'\n      }\n    }\n    return 'err'\n  }\n\n\n  const trackNumbers = []\n  for (let i = 0; i < maxTrackIndex + 1; i++) {\n    trackNumbers.push(<th key={i}>{i + 1}</th>)\n  }\n  return (\n    <div className=\"App\">\n      <div>\n        <h3>{round.location.name}</h3>\n        <h3>\n          <div className=\"row\">\n            <div className=\"ui centered grid\">\n              <button onClick={handleTrackIndexChangeClick(trackIndex - 1)}>{\"<\"}</button>\n              Track {trackIndex + 1}\n              <button onClick={handleTrackIndexChangeClick(trackIndex + 1)}>{\">\"}</button>\n            </div>\n          </div>\n        </h3>\n        <br />\n\n        <table className=\"ui celled table\">\n          <thead>\n            <tr>\n              <th>order</th><th><div className=\"center\">player</div></th>\n              {\n                trackNumbers\n              }\n              <th>total</th>\n            </tr>\n          </thead>\n          <tbody>\n\n            {players.map(player => {\n              const playerPlays = allPoints.filter(point => point.user.id === player.id)\n              if (playerPlays) {\n                playerPlays.sort((p1, p2) => p1.trackIndex - p2.trackIndex)\n                const total = playerPlays.length === 0 ?\n                  0 : playerPlays.map(play => play.points).reduce((tot, point) => tot + point)\n                return (\n                  < tr key={player.id} >\n                    <td key='order'>{orderOf(player)}</td>\n                    <td key={player.username}>{player.username}</td>\n                    {\n                      playerPlays.map(play => {\n                        if (play.trackIndex === trackIndex) {\n                          return (<td key={play.trackIndex + player.id}>\n                            <strong>\n                              <button className=\"ui button\" onClick={handlePointChangeClick(play.points - 1, play.user)}>-</button>\n                              {play.points}\n                              <button className=\"ui button\" onClick={handlePointChangeClick(play.points + 1, play.user)}>+</button>\n                            </strong>\n                          </td>)\n                        } else {\n                          return (<td key={play.trackIndex + player.id}>{play.points}</td>)\n                        }\n                      })\n                    }\n                    <td>{total}</td>\n                  </tr>\n                )\n              } else return (\n                <tr><td>no plays</td></tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n      <br />\n      <div className=\"ui centered grid\">\n        {savedState && <div>saved state</div>}\n        {!savedState && <div className=\"error\"><strong>unsaved state</strong></div>}\n      </div>\n      <br />\n      <div className=\"row\">\n        <button className=\"ui button\" text='delete last track' onClick={handleDeleteLastTrackClick}>delete last track</button>\n        <button className=\"ui button\" text='finish round' onClick={handleRoundFinishClick}>finnish round</button>\n        {!buttonDisabled && <button className=\"ui button\" disabled={buttonDisabled} onClick={handleUploadPointsClick}>upload points</button>}\n      </div>\n    </div>\n  )\n}\n\nexport default Round","import React, { useState } from 'react'\n\nconst AddLocation = (props) => {\n  const [location, setLocation] = useState('')\n\n  if (!props.show) {\n    return null\n  }\n  const handleClick = () => {\n    props.addNewLocation(location)\n    setLocation('')\n  }\n\n  return (\n    <div>\n      <div>\n        <input\n          value={location}\n          onChange={({ target }) => setLocation(target.value)}\n        />\n      </div>\n      <button className=\"ui button\" onClick={handleClick}>add new location</button>\n    </div>\n  )\n}\n\nexport default AddLocation","import React from 'react'\nimport AddLocation from './AddLocation'\n\nconst AddRound = (props) => {\n  if (!props.show) {\n    return null\n  }\n  const allLocations = props.allLocationsQuery.data.allLocations\n  const allUsers = props.allUsersQuery.data.allUsers\n  const currentLocation = props.currentLocation\n  const currentPlayers = props.currentPlayers\n\n  const startNewRound = (event) => {\n    //console.log('start new round with', currentLocation, currentPlayers)\n    event.preventDefault()\n    props.startNewRound()\n  }\n\n  if (props.allLocationsQuery.loading || props.allUsersQuery.loading) {\n    return <div>loading...</div>\n  }\n  if (props.allLocationsQuery.error || props.allUsersQuery.error) {\n    //    console.log('errors', props.allUsersQuery.error, props.allLocationsQuery.error)\n    return <div>error...</div>\n  }\n  if (!currentLocation) {\n    return (\n      <div>\n        <h3>Select location</h3>\n        <div>\n          <table className=\"ui celled table\">\n            <thead>\n              <tr key='header'>\n                <th>locations</th>\n              </tr>\n            </thead>\n            <tbody>\n              {allLocations.map(location =>\n                <tr key={location.id}>\n                  <td className='ui button' onClick={props.handleLocationClick(location)}>{location.name}</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n        <AddLocation show={true}\n          addNewLocation={props.addNewLocation} />\n      </div>\n    )\n  }\n  return (\n    <div>\n      <h3>New round</h3>\n      <div className='ui button' onClick={props.handleLocationClick(currentLocation)}>\n        {currentLocation.name}\n      </div>\n      <div>\n        <table className=\"ui celled table\">\n          <thead>\n            <tr key='header'>\n              <th>selected players</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              {currentPlayers.map(user =>\n                <td className='ui button' key={user.id} onClick={props.handleUserClick(user)}>{user.username}</td>\n              )}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      {\n        currentPlayers.length > 0 && currentLocation &&\n        <div>\n          <form onSubmit={startNewRound}>\n            <button className=\"ui button\" type='submit'>start</button>\n          </form>\n        </div>\n      }\n      <div>\n        <table className=\"ui celled table\">\n          <thead>\n            <tr>\n              <th>all players</th>\n            </tr>\n          </thead>\n          <tbody>\n            {allUsers.map(user =>\n              <tr key={user.id}>\n                <td className='ui button' onClick={props.handleUserClick(user)}>{user.username}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nexport default AddRound","import React from 'react'\nimport '../styles.css'\nconst Rounds = (props) => {\n  if (!props.show) {\n    return null\n  }\n  if (props.allRoundsQuery.loading) {\n    return <div>loading...</div>\n  }\n  if (props.allRoundsQuery.error) {\n    console.log('error', props.allRoundsQuery.error)\n    return <div>error...</div>\n  }\n\n  const handleRoundClick = (round) =>\n    () => {\n      props.setRound(round)\n    }\n  const deleteRound = (round) => {\n    props.deleteRound(round)\n  }\n  const rounds = props.allRoundsQuery.data.allRounds\n  rounds.sort((r1, r2) => r2.date - r1.date)\n  if (!rounds) {\n    return null\n  }\n  return (\n    <div>\n      <table className=\"ui celled table\">\n        <thead>\n          <tr key='header'>\n            <th>location</th><th>date</th><th>players</th><th>delete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rounds.map(round => {\n            const d = new Date(round.date)\n            const dateString = d.getDate() + '.' + (d.getMonth() + 1) + '.' + d.getFullYear() + ' ' + d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds()\n            let userFields = []\n            for (let i = 0; i < round.users.length; i++) {\n              const user = round.users[i]\n              const total = round.totals ? round.totals[i] : null\n              userFields.push(user.username.toString() + (total ? ':' + total.toString() : ''))\n            }\n            const userField = userFields.join('\\n')\n            return (\n              <tr key={round.id}>\n                <td className=\"pointer\" onClick={handleRoundClick(round)}>{round.location.name}</td><td>{dateString}</td>\n                <td><span>{userField}</span></td>\n                <td>\n                  <button className='ui button' onClick={() => { if (window.confirm('Are you sure you wish to delete this round?')) deleteRound(round) }} >X</button>\n                </td>\n              </tr>\n            )\n          }\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Rounds","import React, { useState } from 'react'\n\nconst LoginForm = (props) => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  if (!props.show) {\n    return null\n  }\n  const login = async (event) => {\n    event.preventDefault()\n    props.doLogin(username, password)\n  }\n  const onPasswordChange = (event) => {\n    setPassword(event.target.value)\n  }\n  const onUsernameChange = (event) => {\n    setUsername(event.target.value)\n  }\n  return (\n    <div className='login'>\n      <h2>Login to application</h2>\n      <form onSubmit={login} className=\"ui form\">\n        <div className=\"field\">\n          <label>Username</label>\n          <input id='username'\n            type=\"text\"\n            placeholder=\"username\"\n            value={username}\n            onChange={onUsernameChange} />\n        </div>\n        <div className=\"field\">\n          <label>Password</label>\n          <input id='password'\n            type=\"password\"\n            placeholder=\"password\"\n            value={password}\n            onChange={onPasswordChange} />\n        </div>\n        <button className=\"ui button\" type=\"submit\">\n          login\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm","import gql from \"graphql-tag\";\nexport const LOGIN = gql`\nmutation login($username: String!, $password: String! ){\n  login(username: $username, password: $password){\n    token\n    username\n  }\n  \n}\n`\nexport const ALL_FRIENDS = gql`\n{\n  me {\n    username\n    id\n    friends{username, id}\n  }\n}\n`\nexport const ALL_LOCATIONS = gql`\n{\n  allLocations {\n    name\n    id\n  }\n}  \n`\nexport const ALL_ROUNDS = gql`\n{\n  allRounds {\n    users{username, id}\n    location{name, id}\n    date\n    id\n    totals\n  }\n}\n`\nexport const ALL_POINTS = gql`\n  query ($roundId: ID!) {\n    allPoints(\n      roundId: $roundId\n    ){\n    trackIndex,\n    user{id},\n    round{id},\n    points,\n    id\n    }\n  }\n`\nexport const ALL_USERS = gql`\nquery {\n  allUsers{\n    username,\n    id\n  }\n}\n`\nexport const ME = gql`\nquery{\n  me{\n    admin\n    username\n    id\n  }\n}\n`\nexport const ADD_LOCATION = gql`\n  mutation createLocation($name: String!){\n    addLocation(\n      name: $name\n    ){\n      id, name\n    }\n  }\n`\nexport const ADD_ROUND = gql`\n  mutation createRound($locationId: ID!, $userIds: [ID!]!){\n    addRound(\n      locationId: $locationId\n      userIds: $userIds\n    ){\n      location{\n        name\n        id\n      }\n      users{\n        username\n        id\n      }\n      date\n      id\n      totals\n    }\n  }\n`\nexport const DELETE_ROUND = gql`\n  mutation removeRound($roundId: ID!){\n    deleteRound(\n      roundId: $roundId\n    ){\n      id\n    }\n  }\n`\nexport const ADD_PLAY = gql`\n  mutation createPlay($roundId: ID!, $playNumber:Int!){\n    addPlay(\n      roundId: $roundId,\n      playNumber: $playNumber\n    ){\n      id\n    }\n  }\n`\n\nexport const ADD_CACHED_POINTS = gql`\n  mutation addCachedPoints($roundId: ID!, $pointIds: [ID!]!, $userIds: [ID!]!, $trackIndexes:[Int!]!, $points: [Int!]!){\n    addCachedPoints(\n      roundId: $roundId,\n      pointIds: $pointIds,\n      userIds: $userIds,\n      trackIndexes: $trackIndexes,\n      points: $points\n    ){\n      trackIndex,\n      user{id},\n      round{id},\n      points,\n      id\n    }\n  }\n`\nexport const SUBSCRIBE_POINT_ADDED = gql`\nsubscription($roundId: ID!){\n  pointAdded(roundId: $roundId) {\n    trackIndex,\n    user{id},\n    round{id},\n    points,\n    id\n  }\n}\n`","import { useEffect } from \"react\";\n\nconst useTimeout = (doLogout) => {\n  const signoutTime = 1000 * 60 * 60\n  let logoutTimeout;\n\n  const logout = () => {\n    console.log('You have been logged out');\n    doLogout()\n  }\n\n  const setTimeouts = () => {\n    //    warnTimeout = setTimeout(warn, warningTime);\n    logoutTimeout = setTimeout(logout, signoutTime);\n  };\n\n  const clearTimeouts = () => {\n    //  if (warnTimeout) clearTimeout(warnTimeout);\n    if (logoutTimeout) clearTimeout(logoutTimeout);\n  };\n\n  useEffect(() => {\n    const events = [\n      'load',\n      'mousedown',\n      'click',\n      'scroll',\n      'keypress'\n    ];\n\n    const resetTimeout = () => {\n      clearTimeouts();\n      setTimeouts();\n    };\n\n    for (let i in events) {\n      window.addEventListener(events[i], resetTimeout);\n    }\n\n    setTimeouts();\n  });\n}\n\nexport default useTimeout","import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useApolloClient } from '@apollo/react-hooks'\nimport { Container, Menu, Router } from 'semantic-ui-react'\nimport Navigation from './components/Navigation'\nimport Round from './components/Round'\nimport AddRound from './components/AddRound'\nimport Rounds from './components/Rounds'\nimport LoginForm from './components/LoginForm'\nimport crypto from 'crypto'\nimport {\n  ALL_LOCATIONS,\n  ALL_ROUNDS,\n  ALL_POINTS,\n  ALL_USERS,\n  LOGIN,\n  ADD_LOCATION,\n  ADD_ROUND,\n  DELETE_ROUND,\n  ADD_CACHED_POINTS,\n  ME,\n} from './querys'\nimport useTimeout from './useTimeout'\nimport './styles.css'\n\nconst App = (props) => {\n  const [currentRoundId, setCurrentRoundId] = useState(null)\n  const [currentRound, setCurrentRound] = useState(null)\n  const [currentPlayers, setCurrentPlayers] = useState([])\n  const [currentLocation, setCurrentLocation] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [trackIndex, setTrackIndex] = useState(0)\n  const [token, setToken] = useState(null)\n  //const [username, setUsername] = useState(null)\n  const [page, setPage] = useState(\"main\")\n  const client = useApolloClient()\n  const [savedState, setSavedState] = useState(true)\n  const [uploadingPointsState, setUploadingPointsState] = useState(false)\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    setToken(token)\n  }, [])\n\n  const getRandomId = () => {\n    return crypto.randomBytes(16).toString(\"hex\")\n  }\n  const getPlayerTotals = (round, points) => {\n    const roundId = round.id\n    const users = round.users\n    let totals = []\n    const roundPoints = points.filter(point => point.round.id.toString() === roundId.toString())\n    users.forEach(user => {\n      const userRoundPoints = roundPoints.filter(roundPoint => roundPoint.user.id.toString() === user.id.toString()).map(point => point.points)\n      const total = userRoundPoints.reduce((acc, points) => acc + points, 0)\n      totals.push(total)\n    })\n    return totals\n  }\n  const doLogin = async (username, password) => {\n    const response = await loginMutation({\n      variables: {\n        username,\n        password\n      }\n    })\n    if (response) {\n      const loginToken = response.data.login.token\n      const loginUsername = response.data.login.username\n      if (loginToken) {\n        await client.resetStore()\n        localStorage.setItem('token', loginToken)\n        localStorage.setItem('username', loginUsername)\n        setToken(loginToken)\n        setPage('main')\n        setErrorMessage(null)\n      }\n    }\n  }\n\n  const doLogout = async () => {\n    setToken(null)\n    localStorage.clear()\n    await client.resetStore()\n  }\n  useTimeout(doLogout)\n  if (props.sessionTimeout) {\n    console.log('session timed out')\n    doLogout()\n  }\n  const handleError = (error) => {\n    console.log('error', error)\n    if (error.graphQLErrors.length > 0) {\n      setErrorMessage(error.graphQLErrors[0].message)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 7000)\n    }\n    else if (error.networkError) {\n      const errorArray = error.networkError.result.errors\n      if (errorArray && errorArray.length > 0) {\n        setErrorMessage(errorArray[0].message)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 7000)\n      }\n    }\n  }\n\n\n  // uploads cached points to server\n  const [addCachedPointsMutation] = useMutation(ADD_CACHED_POINTS, {\n    onError: handleError,\n    update: (store, response) => {\n      const serverPoints = response.data.addCachedPoints\n      let dataInStore = store.readQuery({\n        query: ALL_POINTS,\n        variables: {\n          roundId: currentRoundId\n        },\n      })\n      const localPoints = dataInStore.allPoints\n      let okState = true\n      setSavedState(true)\n      if (serverPoints.length !== localPoints.length) {\n        okState = false\n      } else {\n        serverPoints.forEach(serverPoint => {\n          let foundMatch = false\n          localPoints.forEach(localPoint => {\n            if (serverPoint.round.id === localPoint.round.id\n              && serverPoint.user.id === localPoint.user.id\n              && serverPoint.trackIndex === localPoint.trackIndex\n              && serverPoint.points === localPoint.points) {\n              foundMatch = true\n              return\n            }\n          })\n          if (!foundMatch) {\n            okState = false\n          }\n        });\n        //TODO: update the points in the all rounds view\n        if (okState && serverPoints.length > 0) {\n          const roundId = serverPoints[0].round.id\n          const allRoundsInStore = store.readQuery({\n            query: ALL_ROUNDS\n          })\n          const totals = getPlayerTotals(currentRound, serverPoints)\n          const filteredRound = allRoundsInStore.allRounds.filter(round => round.id.toString() === roundId.toString())[0]\n          const savedRound = {\n            ...filteredRound,\n            totals: totals\n          }\n          const filteredRounds = allRoundsInStore.allRounds.filter(round => round.id.toString() !== roundId.toString())\n          store.writeQuery({\n            query: ALL_ROUNDS,\n            data: {\n              allRounds: filteredRounds.concat(savedRound)\n            }\n          })\n\n        }\n      }\n      setSavedState(okState)\n    }\n  })\n\n  const [addRoundMutation] = useMutation(ADD_ROUND, {\n    onError: handleError,\n    update: (store, response) => {\n      let dataInStore = store.readQuery({\n        query: ALL_ROUNDS\n      })\n      const addedRound = response.data.addRound\n      const temp = dataInStore.allRounds.filter(round => round.id !== addedRound.id).concat(addedRound)\n      client.writeQuery({\n        query: ALL_ROUNDS,\n        data: { allRounds: temp }\n      })\n    }\n  })\n  const [addLocationMutation] = useMutation(ADD_LOCATION, {\n    onError: handleError,\n    update: (store, response) => {\n      let dataInStore = store.readQuery({\n        query: ALL_LOCATIONS\n      })\n      const addedLocation = response.data.addLocation\n      const temp = dataInStore.allLocations.filter(location => location.id !== addedLocation.id).concat(addedLocation)\n      client.writeQuery({\n        query: ALL_LOCATIONS,\n        data: { allLocations: temp }\n      })\n    }\n  })\n  const [deleteRoundMutation] = useMutation(DELETE_ROUND, {\n    onError: handleError,\n    update: (store, response) => {\n      let dataInStore = store.readQuery({\n        query: ALL_ROUNDS\n      })\n      const deletedRound = response.data.deleteRound\n      const temp = dataInStore.allRounds.filter(round => round.id !== deletedRound.id)\n      client.writeQuery({\n        query: ALL_ROUNDS,\n        data: { allRounds: temp }\n      })\n    }\n  })\n  const [loginMutation] = useMutation(LOGIN, {\n    onError: handleError,\n    update: (store, response) => {\n    }\n  })\n  const addNewTrackToCache = () => {\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: currentRoundId\n      }\n    })\n    const allPoints = originalState.allPoints\n    let max = -1\n    allPoints.forEach(point => {\n      if (point.trackIndex > max) {\n        max = point.trackIndex\n      }\n    })\n    currentRound.users.forEach(player => {\n      addPointToCache(currentRoundId, player.id, max + 1, 3)\n    })\n  }\n  const addPointToCache = (roundId, userId, trackIndex, points) => {\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      }\n    })\n    const temp = originalState.allPoints.filter(point =>\n      point.user.id === userId && point.trackIndex === trackIndex)\n    if (temp.length > 0) {\n      const data = temp[0]\n      client.writeQuery({\n        query: ALL_POINTS,\n        variables: {\n          roundId: roundId\n        },\n        data: {\n          allPoints: originalState.allPoints\n            .filter(point => point.id !== data.id)\n            .concat({\n              ...data,\n              points\n            })\n        }\n      })\n    } else {\n      const newPoint = {\n        round: { id: roundId, __typename: \"Round\" },\n        user: { id: userId, __typename: \"User\" },\n        trackIndex,\n        points,\n        id: getRandomId(),\n        __typename: 'Point'\n      }\n      client.writeQuery({\n        query: ALL_POINTS,\n        variables: {\n          roundId: roundId\n        },\n        data: {\n          allPoints: originalState.allPoints\n            .concat(newPoint)\n        }\n      })\n    }\n    setSavedState(false)\n  }\n\n  const deleteLastTrackFromCache = (roundId) => {\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      }\n    })\n    if (originalState.allPoints.length === 0) {\n      return\n    }\n    const maxTrackIndex = originalState.allPoints\n      .map(point => point.trackIndex)\n      .sort((i1, i2) => i2 - i1)[0]\n    client.writeQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: roundId\n      },\n      data: {\n        allPoints: originalState.allPoints.filter(point => point.trackIndex !== maxTrackIndex)\n      }\n    })\n    setSavedState(false)\n    if (trackIndex >= maxTrackIndex) {\n      setTrackIndex(maxTrackIndex - 1)\n    }\n  }\n\n  const uploadPointsFromCacheToServer = async () => {\n\n    const originalState = client.readQuery({\n      query: ALL_POINTS,\n      variables: {\n        roundId: currentRoundId\n      }\n    })\n    if (originalState.allPoints.length === 0) {\n      return\n    }\n    const allPoints = originalState.allPoints\n    try {\n      await setUploadingPointsState(true)\n      await addCachedPointsMutation({\n        variables: {\n          roundId: currentRoundId,\n          pointIds: allPoints.map(point => point.id.toString()),\n          userIds: allPoints.map(point => point.user.id.toString()),\n          trackIndexes: allPoints.map(point => point.trackIndex),\n          points: allPoints.map(point => point.points)\n        }\n      })\n      setUploadingPointsState(false)\n    } catch (error) {\n      handleError(error)\n    }\n  }\n\n  const deleteLastTrack = async () => {\n    deleteLastTrackFromCache(currentRoundId)\n  }\n  const updatePoint = async (points, userId) => {\n    addPointToCache(currentRoundId, userId, trackIndex, points)\n  }\n\n  const changeTrack = (index) => {\n    setTrackIndex(index)\n  }\n  const setNewRound = (round) => {\n    setCurrentRound(round)\n    setCurrentRoundId(round.id)\n    setTrackIndex(-1)\n    setPage('round')\n  }\n  const allLocationsQuery = useQuery(ALL_LOCATIONS, {\n    skip: !token\n  })\n  const allUsersQuery = useQuery(ALL_USERS, {\n    skip: !token\n  })\n  const allPointsQuery = useQuery(ALL_POINTS, {\n    skip: !currentRoundId || !token,\n    variables: {\n      roundId: currentRoundId\n    },\n  })\n\n  const allRoundsQuery = useQuery(ALL_ROUNDS, {\n    skip: !token\n  })\n  const handleLocationClick = (location) =>\n    () => {\n      if (location === currentLocation) {\n        setCurrentLocation(null)\n      } else {\n        setCurrentLocation(location)\n      }\n    }\n  const handleUserClick = (user) =>\n    () => {\n      if (currentPlayers.includes(user)) {\n        setCurrentPlayers(currentPlayers.filter(player => player !== user))\n      } else {\n        setCurrentPlayers(currentPlayers.concat(user))\n      }\n    }\n\n  const addNewLocation = async (locationName) => {\n    await addLocationMutation(\n      {\n        variables: {\n          name: locationName\n        }\n      }\n    )\n  }\n\n  const deleteRound = async (round) => {\n    await deleteRoundMutation(\n      {\n        variables: {\n          roundId: round.id\n        }\n      }\n    )\n  }\n  const startNewRound = async () => {\n    const response = await addRoundMutation(\n      {\n        variables: {\n          userIds: currentPlayers.map(user => user.id),\n          locationId: currentLocation.id\n        }\n      }\n    )\n    setCurrentRound(response.data.addRound)\n    setCurrentRoundId(response.data.addRound.id)\n  }\n  const finishRound = async () => {\n    await uploadPointsFromCacheToServer()\n    setCurrentRound(null)\n    setCurrentRoundId(null)\n    setCurrentPlayers([])\n    setCurrentLocation(null)\n    setPage('main')\n  }\n  const meQuery = useQuery(ME, {\n    skip: !token\n  })\n  return (\n    <Container>\n      {token && <Navigation show={true}\n        doLogout={doLogout}\n        setPage={setPage}\n        meQuery={meQuery}\n        currentRoundId={currentRoundId} />\n      }\n      {errorMessage && <div className=\"error\">{errorMessage}</div>\n      }\n      {!token &&\n        <LoginForm\n          doLogin={doLogin}\n          show={true}\n          handleError={handleError} />\n      }\n      {token && !currentRoundId && <AddRound\n        addNewLocation={addNewLocation}\n        allLocationsQuery={allLocationsQuery}\n        allUsersQuery={allUsersQuery}\n        handleLocationClick={handleLocationClick}\n        handleUserClick={handleUserClick}\n        currentLocation={currentLocation}\n        currentPlayers={currentPlayers}\n        startNewRound={startNewRound}\n        show={page === 'round'}\n      />}\n      {token && <Rounds\n        allRoundsQuery={allRoundsQuery}\n        setRound={setNewRound}\n        deleteRound={deleteRound}\n        show={page === 'main'}\n      />}\n      {token && currentRoundId && <Round\n        allPointsQuery={allPointsQuery}\n        round={currentRound}\n        addNewTrack={addNewTrackToCache}\n        updatePoint={updatePoint}\n        deleteLastTrack={deleteLastTrack}\n        changeTrack={changeTrack}\n        trackIndex={trackIndex}\n        finishRound={finishRound}\n        uploadPoints={uploadPointsFromCacheToServer}\n        show={page === 'round'}\n        savedState={savedState}\n        uploadingPoints={uploadingPointsState}\n      />}\n      <div>\n        <br />\n        <em>Frisbeegolf app, copyright 2020 Juho Taipale</em>\n      </div>\n    </Container>\n  )\n\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ApolloProvider } from '@apollo/react-common'\nimport { ApolloProvider as ApolloHooksProvider } from '@apollo/react-hooks'\n\nimport { ApolloClient } from '@apollo/client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\nconst wshost = window.location.origin.replace(/^http/, 'ws')\nlet wsuri = `${wshost}/graphql`\nlet httpUri = '/graphql'\nif (process.env.NODE_ENV !== 'production') {\n  console.log('development or testing environment')\n  httpUri = 'http://localhost:4000/graphql'\n  wsuri = `ws://localhost:4000/graphql`\n  //httpUri = 'http://frisbeegolfappi.herokuapp.com/graphql'\n  //wsuri = `ws://frisbeegolfappi.herokuapp.com/graphql`\n}\nconsole.log('websocket uri', wsuri)\nconsole.log('http uri', httpUri)\n\nconst wsLink = new WebSocketLink({\n  uri: wsuri,\n  //options: { reconnect: true }\n})\n\nconst httpLink = createHttpLink({\n  uri: httpUri,\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('token')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <App />\n    </ApolloHooksProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}